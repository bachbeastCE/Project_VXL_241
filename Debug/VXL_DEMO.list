
VXL_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005284  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e8  080054e8  000070d8  2**0
                  CONTENTS
  4 .ARM          00000008  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f0  080054f0  000070d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054f4  080054f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  080054f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  200000d8  080055d0  000070d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  080055d0  00007710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105ab  00000000  00000000  00007101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d5  00000000  00000000  000176ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd6  00000000  00000000  0001b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019211  00000000  00000000  0001bdbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001597b  00000000  00000000  00034fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2da  00000000  00000000  0004a94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7c24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004904  00000000  00000000  000d7c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000dc56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005378 	.word	0x08005378

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	08005378 	.word	0x08005378

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <isButtonPressed>:
int button_pressed[5] = {0, 0, 0, 0, 0};
int button_long_pressed[5] = {0, 0, 0, 0, 0};
int button_flag[5] = {0, 0, 0, 0, 0};

// Check if the button was pressed
int isButtonPressed(int button_index) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    if (button_pressed[button_index] == 1) {
 8000178:	4a09      	ldr	r2, [pc, #36]	@ (80001a0 <isButtonPressed+0x30>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000180:	2b01      	cmp	r3, #1
 8000182:	d106      	bne.n	8000192 <isButtonPressed+0x22>
        button_pressed[button_index] = 0;
 8000184:	4a06      	ldr	r2, [pc, #24]	@ (80001a0 <isButtonPressed+0x30>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2100      	movs	r1, #0
 800018a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800018e:	2301      	movs	r3, #1
 8000190:	e000      	b.n	8000194 <isButtonPressed+0x24>
    }
    return 0;
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	200000f4 	.word	0x200000f4

080001a4 <isButtonLongPressed>:

// Check if the button was long-pressed
int isButtonLongPressed(int button_index) {
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
    if (button_long_pressed[button_index] == 1) {
 80001ac:	4a09      	ldr	r2, [pc, #36]	@ (80001d4 <isButtonLongPressed+0x30>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d106      	bne.n	80001c6 <isButtonLongPressed+0x22>
        button_long_pressed[button_index] = 0;
 80001b8:	4a06      	ldr	r2, [pc, #24]	@ (80001d4 <isButtonLongPressed+0x30>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2100      	movs	r1, #0
 80001be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 80001c2:	2301      	movs	r3, #1
 80001c4:	e000      	b.n	80001c8 <isButtonLongPressed+0x24>
    }
    return 0;
 80001c6:	2300      	movs	r3, #0
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000108 	.word	0x20000108

080001d8 <getKeyInput>:
    button_flag[button_index] = 1;
    // Add specific logic for short press or long press
}

// Detect button input and process short/long presses
void getKeyInput() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_BUTTON; i++) {
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e07b      	b.n	80002dc <getKeyInput+0x104>
        KeyReg2[i] = KeyReg1[i];
 80001e4:	4a42      	ldr	r2, [pc, #264]	@ (80002f0 <getKeyInput+0x118>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	4941      	ldr	r1, [pc, #260]	@ (80002f4 <getKeyInput+0x11c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg0[i];
 80001f4:	4a40      	ldr	r2, [pc, #256]	@ (80002f8 <getKeyInput+0x120>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	493c      	ldr	r1, [pc, #240]	@ (80002f0 <getKeyInput+0x118>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Replace MODIFY_BUTTON, MODE_BUTTON, etc., with the actual GPIO pins for your buttons
        KeyReg0[0] = HAL_GPIO_ReadPin(GPIOA, UP_BUTTON);
 8000204:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000208:	483c      	ldr	r0, [pc, #240]	@ (80002fc <getKeyInput+0x124>)
 800020a:	f002 f8a5 	bl	8002358 <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	461a      	mov	r2, r3
 8000212:	4b39      	ldr	r3, [pc, #228]	@ (80002f8 <getKeyInput+0x120>)
 8000214:	601a      	str	r2, [r3, #0]
        KeyReg0[1] = HAL_GPIO_ReadPin(GPIOA, SET_BUTTON);
 8000216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800021a:	4838      	ldr	r0, [pc, #224]	@ (80002fc <getKeyInput+0x124>)
 800021c:	f002 f89c 	bl	8002358 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	461a      	mov	r2, r3
 8000224:	4b34      	ldr	r3, [pc, #208]	@ (80002f8 <getKeyInput+0x120>)
 8000226:	605a      	str	r2, [r3, #4]
        // Add more buttons as needed

        // Debounce logic
        if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000228:	4a31      	ldr	r2, [pc, #196]	@ (80002f0 <getKeyInput+0x118>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4931      	ldr	r1, [pc, #196]	@ (80002f8 <getKeyInput+0x120>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000238:	429a      	cmp	r2, r3
 800023a:	d14c      	bne.n	80002d6 <getKeyInput+0xfe>
 800023c:	4a2c      	ldr	r2, [pc, #176]	@ (80002f0 <getKeyInput+0x118>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	492b      	ldr	r1, [pc, #172]	@ (80002f4 <getKeyInput+0x11c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024c:	429a      	cmp	r2, r3
 800024e:	d142      	bne.n	80002d6 <getKeyInput+0xfe>
            if (KeyReg2[i] != KeyReg3[i]) {
 8000250:	4a28      	ldr	r2, [pc, #160]	@ (80002f4 <getKeyInput+0x11c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	4929      	ldr	r1, [pc, #164]	@ (8000300 <getKeyInput+0x128>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000260:	429a      	cmp	r2, r3
 8000262:	d018      	beq.n	8000296 <getKeyInput+0xbe>
                KeyReg3[i] = KeyReg2[i];
 8000264:	4a23      	ldr	r2, [pc, #140]	@ (80002f4 <getKeyInput+0x11c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	4924      	ldr	r1, [pc, #144]	@ (8000300 <getKeyInput+0x128>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // Button is pressed
                if (KeyReg3[i] == PRESSED_STATE) {
 8000274:	4a22      	ldr	r2, [pc, #136]	@ (8000300 <getKeyInput+0x128>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d12a      	bne.n	80002d6 <getKeyInput+0xfe>
                    TimeOutForKeyPress[i] = 200; // Reset long press timeout
 8000280:	4a20      	ldr	r2, [pc, #128]	@ (8000304 <getKeyInput+0x12c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	21c8      	movs	r1, #200	@ 0xc8
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    button_pressed[i] = 1;       // Mark as a short press
 800028a:	4a1f      	ldr	r2, [pc, #124]	@ (8000308 <getKeyInput+0x130>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2101      	movs	r1, #1
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000294:	e01f      	b.n	80002d6 <getKeyInput+0xfe>
                }
            } else {
                // If button is still pressed, decrement timeout for long press
                if (KeyReg3[i] == PRESSED_STATE) {
 8000296:	4a1a      	ldr	r2, [pc, #104]	@ (8000300 <getKeyInput+0x128>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d119      	bne.n	80002d6 <getKeyInput+0xfe>
                    if (TimeOutForKeyPress[i] > 0) {
 80002a2:	4a18      	ldr	r2, [pc, #96]	@ (8000304 <getKeyInput+0x12c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	dd09      	ble.n	80002c2 <getKeyInput+0xea>
                        TimeOutForKeyPress[i]--;
 80002ae:	4a15      	ldr	r2, [pc, #84]	@ (8000304 <getKeyInput+0x12c>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	1e5a      	subs	r2, r3, #1
 80002b8:	4912      	ldr	r1, [pc, #72]	@ (8000304 <getKeyInput+0x12c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002c0:	e009      	b.n	80002d6 <getKeyInput+0xfe>
                    } else {
                        // Long press detected
                        button_long_pressed[i] = 1;
 80002c2:	4a12      	ldr	r2, [pc, #72]	@ (800030c <getKeyInput+0x134>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2101      	movs	r1, #1
 80002c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        TimeOutForKeyPress[i] = 200; // Reset timeout
 80002cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000304 <getKeyInput+0x12c>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	21c8      	movs	r1, #200	@ 0xc8
 80002d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_BUTTON; i++) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3301      	adds	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	2205      	movs	r2, #5
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4293      	cmp	r3, r2
 80002e2:	f6ff af7f 	blt.w	80001e4 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000014 	.word	0x20000014
 80002f4:	20000028 	.word	0x20000028
 80002f8:	20000000 	.word	0x20000000
 80002fc:	40010800 	.word	0x40010800
 8000300:	2000003c 	.word	0x2000003c
 8000304:	20000050 	.word	0x20000050
 8000308:	200000f4 	.word	0x200000f4
 800030c:	20000108 	.word	0x20000108

08000310 <run_automatic>:
#include "fsm_automatic.h"
void run_automatic(){
 8000310:	b580      	push	{r7, lr}
 8000312:	b094      	sub	sp, #80	@ 0x50
 8000314:	af00      	add	r7, sp, #0
	switch(status1){
 8000316:	4b99      	ldr	r3, [pc, #612]	@ (800057c <run_automatic+0x26c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b0d      	cmp	r3, #13
 800031c:	d86a      	bhi.n	80003f4 <run_automatic+0xe4>
 800031e:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <run_automatic+0x14>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	0800035d 	.word	0x0800035d
 8000328:	080003f5 	.word	0x080003f5
 800032c:	080003f5 	.word	0x080003f5
 8000330:	080003f5 	.word	0x080003f5
 8000334:	080003f5 	.word	0x080003f5
 8000338:	080003f5 	.word	0x080003f5
 800033c:	080003f5 	.word	0x080003f5
 8000340:	080003f5 	.word	0x080003f5
 8000344:	080003f5 	.word	0x080003f5
 8000348:	080003f5 	.word	0x080003f5
 800034c:	080003f5 	.word	0x080003f5
 8000350:	08000375 	.word	0x08000375
 8000354:	080003bd 	.word	0x080003bd
 8000358:	080003d9 	.word	0x080003d9
				case INIT:{
						ResetLight1();
 800035c:	f000 fd26 	bl	8000dac <ResetLight1>
						status1 = RED_LED_AUTO;
 8000360:	4b86      	ldr	r3, [pc, #536]	@ (800057c <run_automatic+0x26c>)
 8000362:	220b      	movs	r2, #11
 8000364:	601a      	str	r2, [r3, #0]
						count1 = time_red;
 8000366:	4b86      	ldr	r3, [pc, #536]	@ (8000580 <run_automatic+0x270>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a86      	ldr	r2, [pc, #536]	@ (8000584 <run_automatic+0x274>)
 800036c:	6013      	str	r3, [r2, #0]
						lcd_clear_display();
 800036e:	f000 fe5c 	bl	800102a <lcd_clear_display>
						break;
 8000372:	e046      	b.n	8000402 <run_automatic+0xf2>
					}
				case RED_LED_AUTO:{
						RedLight1();
 8000374:	f000 fd3c 	bl	8000df0 <RedLight1>
						if (count1 == 0){
 8000378:	4b82      	ldr	r3, [pc, #520]	@ (8000584 <run_automatic+0x274>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d106      	bne.n	800038e <run_automatic+0x7e>
							status1 = GREEN_LED_AUTO;
 8000380:	4b7e      	ldr	r3, [pc, #504]	@ (800057c <run_automatic+0x26c>)
 8000382:	220d      	movs	r2, #13
 8000384:	601a      	str	r2, [r3, #0]
							count1 = time_green;
 8000386:	4b80      	ldr	r3, [pc, #512]	@ (8000588 <run_automatic+0x278>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a7e      	ldr	r2, [pc, #504]	@ (8000584 <run_automatic+0x274>)
 800038c:	6013      	str	r3, [r2, #0]
						}
						if (isButtonLongPressed(up_button)==1){
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ff08 	bl	80001a4 <isButtonLongPressed>
 8000394:	4603      	mov	r3, r0
 8000396:	2b01      	cmp	r3, #1
 8000398:	d12e      	bne.n	80003f8 <run_automatic+0xe8>
							ResetLight1();
 800039a:	f000 fd07 	bl	8000dac <ResetLight1>
							ResetLight2();
 800039e:	f000 fd15 	bl	8000dcc <ResetLight2>
							status1 = RED_GREEN_MAN;
 80003a2:	4b76      	ldr	r3, [pc, #472]	@ (800057c <run_automatic+0x26c>)
 80003a4:	2215      	movs	r2, #21
 80003a6:	601a      	str	r2, [r3, #0]
							status2 = RED_GREEN_MAN;
 80003a8:	4b78      	ldr	r3, [pc, #480]	@ (800058c <run_automatic+0x27c>)
 80003aa:	2215      	movs	r2, #21
 80003ac:	601a      	str	r2, [r3, #0]
							count1 = 10*scale;
 80003ae:	4b75      	ldr	r3, [pc, #468]	@ (8000584 <run_automatic+0x274>)
 80003b0:	2264      	movs	r2, #100	@ 0x64
 80003b2:	601a      	str	r2, [r3, #0]
							count2 = 1;
 80003b4:	4b76      	ldr	r3, [pc, #472]	@ (8000590 <run_automatic+0x280>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	601a      	str	r2, [r3, #0]
						}
						break;
 80003ba:	e01d      	b.n	80003f8 <run_automatic+0xe8>
					}
				case YELLOW_LED_AUTO:{
						YellowLight1();
 80003bc:	f000 fd28 	bl	8000e10 <YellowLight1>
						if (count1==0){
 80003c0:	4b70      	ldr	r3, [pc, #448]	@ (8000584 <run_automatic+0x274>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d119      	bne.n	80003fc <run_automatic+0xec>
							status1 = RED_LED_AUTO;
 80003c8:	4b6c      	ldr	r3, [pc, #432]	@ (800057c <run_automatic+0x26c>)
 80003ca:	220b      	movs	r2, #11
 80003cc:	601a      	str	r2, [r3, #0]
							count1 = time_red;
 80003ce:	4b6c      	ldr	r3, [pc, #432]	@ (8000580 <run_automatic+0x270>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a6c      	ldr	r2, [pc, #432]	@ (8000584 <run_automatic+0x274>)
 80003d4:	6013      	str	r3, [r2, #0]
						}
						break;
 80003d6:	e011      	b.n	80003fc <run_automatic+0xec>
					}
				case GREEN_LED_AUTO:{
						GreenLight1();
 80003d8:	f000 fd2a 	bl	8000e30 <GreenLight1>
						if (count1==0)	{
 80003dc:	4b69      	ldr	r3, [pc, #420]	@ (8000584 <run_automatic+0x274>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10d      	bne.n	8000400 <run_automatic+0xf0>
							status1 = YELLOW_LED_AUTO;
 80003e4:	4b65      	ldr	r3, [pc, #404]	@ (800057c <run_automatic+0x26c>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	601a      	str	r2, [r3, #0]
							count1 = time_yellow;
 80003ea:	4b6a      	ldr	r3, [pc, #424]	@ (8000594 <run_automatic+0x284>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a65      	ldr	r2, [pc, #404]	@ (8000584 <run_automatic+0x274>)
 80003f0:	6013      	str	r3, [r2, #0]
						}
						break;
 80003f2:	e005      	b.n	8000400 <run_automatic+0xf0>
					}
				default:
						break;
 80003f4:	bf00      	nop
 80003f6:	e004      	b.n	8000402 <run_automatic+0xf2>
						break;
 80003f8:	bf00      	nop
 80003fa:	e002      	b.n	8000402 <run_automatic+0xf2>
						break;
 80003fc:	bf00      	nop
 80003fe:	e000      	b.n	8000402 <run_automatic+0xf2>
						break;
 8000400:	bf00      	nop
			}

		switch(status2){
 8000402:	4b62      	ldr	r3, [pc, #392]	@ (800058c <run_automatic+0x27c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b0d      	cmp	r3, #13
 8000408:	d852      	bhi.n	80004b0 <run_automatic+0x1a0>
 800040a:	a201      	add	r2, pc, #4	@ (adr r2, 8000410 <run_automatic+0x100>)
 800040c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000410:	08000449 	.word	0x08000449
 8000414:	080004b1 	.word	0x080004b1
 8000418:	080004b1 	.word	0x080004b1
 800041c:	080004b1 	.word	0x080004b1
 8000420:	080004b1 	.word	0x080004b1
 8000424:	080004b1 	.word	0x080004b1
 8000428:	080004b1 	.word	0x080004b1
 800042c:	080004b1 	.word	0x080004b1
 8000430:	080004b1 	.word	0x080004b1
 8000434:	080004b1 	.word	0x080004b1
 8000438:	080004b1 	.word	0x080004b1
 800043c:	0800045d 	.word	0x0800045d
 8000440:	08000479 	.word	0x08000479
 8000444:	08000495 	.word	0x08000495
					case INIT:{
							ResetLight2();
 8000448:	f000 fcc0 	bl	8000dcc <ResetLight2>
							status2 = GREEN_LED_AUTO;
 800044c:	4b4f      	ldr	r3, [pc, #316]	@ (800058c <run_automatic+0x27c>)
 800044e:	220d      	movs	r2, #13
 8000450:	601a      	str	r2, [r3, #0]
							count2 = time_green;
 8000452:	4b4d      	ldr	r3, [pc, #308]	@ (8000588 <run_automatic+0x278>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a4e      	ldr	r2, [pc, #312]	@ (8000590 <run_automatic+0x280>)
 8000458:	6013      	str	r3, [r2, #0]
							break;
 800045a:	e030      	b.n	80004be <run_automatic+0x1ae>
						}
					case RED_LED_AUTO:{
							RedLight2();
 800045c:	f000 fcf8 	bl	8000e50 <RedLight2>
							if (count2==0){
 8000460:	4b4b      	ldr	r3, [pc, #300]	@ (8000590 <run_automatic+0x280>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d125      	bne.n	80004b4 <run_automatic+0x1a4>
								status2 = GREEN_LED_AUTO;
 8000468:	4b48      	ldr	r3, [pc, #288]	@ (800058c <run_automatic+0x27c>)
 800046a:	220d      	movs	r2, #13
 800046c:	601a      	str	r2, [r3, #0]
								count2 = time_green;
 800046e:	4b46      	ldr	r3, [pc, #280]	@ (8000588 <run_automatic+0x278>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a47      	ldr	r2, [pc, #284]	@ (8000590 <run_automatic+0x280>)
 8000474:	6013      	str	r3, [r2, #0]
							}
							break;
 8000476:	e01d      	b.n	80004b4 <run_automatic+0x1a4>
						}
					case YELLOW_LED_AUTO:{
							YellowLight2();
 8000478:	f000 fcfc 	bl	8000e74 <YellowLight2>
							if (count2==0){
 800047c:	4b44      	ldr	r3, [pc, #272]	@ (8000590 <run_automatic+0x280>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d119      	bne.n	80004b8 <run_automatic+0x1a8>
								status2 = RED_LED_AUTO;
 8000484:	4b41      	ldr	r3, [pc, #260]	@ (800058c <run_automatic+0x27c>)
 8000486:	220b      	movs	r2, #11
 8000488:	601a      	str	r2, [r3, #0]
								count2 = time_red;
 800048a:	4b3d      	ldr	r3, [pc, #244]	@ (8000580 <run_automatic+0x270>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a40      	ldr	r2, [pc, #256]	@ (8000590 <run_automatic+0x280>)
 8000490:	6013      	str	r3, [r2, #0]
							}
							break;
 8000492:	e011      	b.n	80004b8 <run_automatic+0x1a8>
						}
					case GREEN_LED_AUTO:{
							GreenLight2();
 8000494:	f000 fd00 	bl	8000e98 <GreenLight2>
							if (count2 == 0)	{
 8000498:	4b3d      	ldr	r3, [pc, #244]	@ (8000590 <run_automatic+0x280>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10d      	bne.n	80004bc <run_automatic+0x1ac>
								status2 = YELLOW_LED_AUTO;
 80004a0:	4b3a      	ldr	r3, [pc, #232]	@ (800058c <run_automatic+0x27c>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	601a      	str	r2, [r3, #0]
								count2 = time_yellow;
 80004a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000594 <run_automatic+0x284>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a39      	ldr	r2, [pc, #228]	@ (8000590 <run_automatic+0x280>)
 80004ac:	6013      	str	r3, [r2, #0]
							}
							break;
 80004ae:	e005      	b.n	80004bc <run_automatic+0x1ac>
						}
					default:
							break;
 80004b0:	bf00      	nop
 80004b2:	e004      	b.n	80004be <run_automatic+0x1ae>
							break;
 80004b4:	bf00      	nop
 80004b6:	e002      	b.n	80004be <run_automatic+0x1ae>
							break;
 80004b8:	bf00      	nop
 80004ba:	e000      	b.n	80004be <run_automatic+0x1ae>
							break;
 80004bc:	bf00      	nop
				}

		if((status1/10)==1 && count1>0 )count1--;
 80004be:	4b2f      	ldr	r3, [pc, #188]	@ (800057c <run_automatic+0x26c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3b0a      	subs	r3, #10
 80004c4:	2b09      	cmp	r3, #9
 80004c6:	d808      	bhi.n	80004da <run_automatic+0x1ca>
 80004c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000584 <run_automatic+0x274>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd04      	ble.n	80004da <run_automatic+0x1ca>
 80004d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000584 <run_automatic+0x274>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000584 <run_automatic+0x274>)
 80004d8:	6013      	str	r3, [r2, #0]
		if((status2/10)==1 && count2>0 )count2--;
 80004da:	4b2c      	ldr	r3, [pc, #176]	@ (800058c <run_automatic+0x27c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3b0a      	subs	r3, #10
 80004e0:	2b09      	cmp	r3, #9
 80004e2:	d808      	bhi.n	80004f6 <run_automatic+0x1e6>
 80004e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000590 <run_automatic+0x280>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	dd04      	ble.n	80004f6 <run_automatic+0x1e6>
 80004ec:	4b28      	ldr	r3, [pc, #160]	@ (8000590 <run_automatic+0x280>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	4a27      	ldr	r2, [pc, #156]	@ (8000590 <run_automatic+0x280>)
 80004f4:	6013      	str	r3, [r2, #0]
		if((status1/10)==1 && count3>0 ){
 80004f6:	4b21      	ldr	r3, [pc, #132]	@ (800057c <run_automatic+0x26c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3b0a      	subs	r3, #10
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	f200 80cf 	bhi.w	80006a0 <run_automatic+0x390>
 8000502:	4b25      	ldr	r3, [pc, #148]	@ (8000598 <run_automatic+0x288>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	f340 80ca 	ble.w	80006a0 <run_automatic+0x390>
			count3--;
 800050c:	4b22      	ldr	r3, [pc, #136]	@ (8000598 <run_automatic+0x288>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a21      	ldr	r2, [pc, #132]	@ (8000598 <run_automatic+0x288>)
 8000514:	6013      	str	r3, [r2, #0]
			if(count3 ==0){
 8000516:	4b20      	ldr	r3, [pc, #128]	@ (8000598 <run_automatic+0x288>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	f040 80c0 	bne.w	80006a0 <run_automatic+0x390>
				count3 = scale;
 8000520:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <run_automatic+0x288>)
 8000522:	220a      	movs	r2, #10
 8000524:	601a      	str	r2, [r3, #0]
		        //LCD L1
		        lcd_clear_display();
 8000526:	f000 fd80 	bl	800102a <lcd_clear_display>
		        lcd_goto_XY (1, 0);
 800052a:	2100      	movs	r1, #0
 800052c:	2001      	movs	r0, #1
 800052e:	f000 fd83 	bl	8001038 <lcd_goto_XY>
		        char str1[40];
		        if(status1 == RED_LED_AUTO )sprintf(str1, " L1: RED %d", count1/10);
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <run_automatic+0x26c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b0b      	cmp	r3, #11
 8000538:	d10d      	bne.n	8000556 <run_automatic+0x246>
 800053a:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <run_automatic+0x274>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a17      	ldr	r2, [pc, #92]	@ (800059c <run_automatic+0x28c>)
 8000540:	fb82 1203 	smull	r1, r2, r2, r3
 8000544:	1092      	asrs	r2, r2, #2
 8000546:	17db      	asrs	r3, r3, #31
 8000548:	1ad2      	subs	r2, r2, r3
 800054a:	463b      	mov	r3, r7
 800054c:	4914      	ldr	r1, [pc, #80]	@ (80005a0 <run_automatic+0x290>)
 800054e:	4618      	mov	r0, r3
 8000550:	f004 fa52 	bl	80049f8 <siprintf>
 8000554:	e035      	b.n	80005c2 <run_automatic+0x2b2>
			else if(status1 == YELLOW_LED_AUTO)sprintf(str1, " L1: YELLOW %d", count1/10);
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <run_automatic+0x26c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b0c      	cmp	r3, #12
 800055c:	d124      	bne.n	80005a8 <run_automatic+0x298>
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <run_automatic+0x274>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <run_automatic+0x28c>)
 8000564:	fb82 1203 	smull	r1, r2, r2, r3
 8000568:	1092      	asrs	r2, r2, #2
 800056a:	17db      	asrs	r3, r3, #31
 800056c:	1ad2      	subs	r2, r2, r3
 800056e:	463b      	mov	r3, r7
 8000570:	490c      	ldr	r1, [pc, #48]	@ (80005a4 <run_automatic+0x294>)
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fa40 	bl	80049f8 <siprintf>
 8000578:	e023      	b.n	80005c2 <run_automatic+0x2b2>
 800057a:	bf00      	nop
 800057c:	20000128 	.word	0x20000128
 8000580:	20000068 	.word	0x20000068
 8000584:	20000130 	.word	0x20000130
 8000588:	20000070 	.word	0x20000070
 800058c:	2000012c 	.word	0x2000012c
 8000590:	20000134 	.word	0x20000134
 8000594:	2000006c 	.word	0x2000006c
 8000598:	20000074 	.word	0x20000074
 800059c:	66666667 	.word	0x66666667
 80005a0:	08005390 	.word	0x08005390
 80005a4:	0800539c 	.word	0x0800539c
			else sprintf(str1, " L1: GREEN %d", count1/10);
 80005a8:	4b3f      	ldr	r3, [pc, #252]	@ (80006a8 <run_automatic+0x398>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a3f      	ldr	r2, [pc, #252]	@ (80006ac <run_automatic+0x39c>)
 80005ae:	fb82 1203 	smull	r1, r2, r2, r3
 80005b2:	1092      	asrs	r2, r2, #2
 80005b4:	17db      	asrs	r3, r3, #31
 80005b6:	1ad2      	subs	r2, r2, r3
 80005b8:	463b      	mov	r3, r7
 80005ba:	493d      	ldr	r1, [pc, #244]	@ (80006b0 <run_automatic+0x3a0>)
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 fa1b 	bl	80049f8 <siprintf>
		        lcd_send_string (str1);
 80005c2:	463b      	mov	r3, r7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fd1b 	bl	8001000 <lcd_send_string>
		        //LCD L2
		        lcd_goto_XY (0, 0);
 80005ca:	2100      	movs	r1, #0
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fd33 	bl	8001038 <lcd_goto_XY>
		        char str2[40];
		        if(status2 == RED_LED_AUTO )sprintf(str2, "L2: RED %d", count2/10);
 80005d2:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <run_automatic+0x3a4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b0b      	cmp	r3, #11
 80005d8:	d10e      	bne.n	80005f8 <run_automatic+0x2e8>
 80005da:	4b37      	ldr	r3, [pc, #220]	@ (80006b8 <run_automatic+0x3a8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a33      	ldr	r2, [pc, #204]	@ (80006ac <run_automatic+0x39c>)
 80005e0:	fb82 1203 	smull	r1, r2, r2, r3
 80005e4:	1092      	asrs	r2, r2, #2
 80005e6:	17db      	asrs	r3, r3, #31
 80005e8:	1ad2      	subs	r2, r2, r3
 80005ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ee:	4933      	ldr	r1, [pc, #204]	@ (80006bc <run_automatic+0x3ac>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fa01 	bl	80049f8 <siprintf>
 80005f6:	e020      	b.n	800063a <run_automatic+0x32a>
			else if(status2 == YELLOW_LED_AUTO)sprintf(str2, "L2: YELLOW %d", count2/10);
 80005f8:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <run_automatic+0x3a4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b0c      	cmp	r3, #12
 80005fe:	d10e      	bne.n	800061e <run_automatic+0x30e>
 8000600:	4b2d      	ldr	r3, [pc, #180]	@ (80006b8 <run_automatic+0x3a8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a29      	ldr	r2, [pc, #164]	@ (80006ac <run_automatic+0x39c>)
 8000606:	fb82 1203 	smull	r1, r2, r2, r3
 800060a:	1092      	asrs	r2, r2, #2
 800060c:	17db      	asrs	r3, r3, #31
 800060e:	1ad2      	subs	r2, r2, r3
 8000610:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000614:	492a      	ldr	r1, [pc, #168]	@ (80006c0 <run_automatic+0x3b0>)
 8000616:	4618      	mov	r0, r3
 8000618:	f004 f9ee 	bl	80049f8 <siprintf>
 800061c:	e00d      	b.n	800063a <run_automatic+0x32a>
			else sprintf(str2, "L2: GREEN %d", count2/10);
 800061e:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <run_automatic+0x3a8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a22      	ldr	r2, [pc, #136]	@ (80006ac <run_automatic+0x39c>)
 8000624:	fb82 1203 	smull	r1, r2, r2, r3
 8000628:	1092      	asrs	r2, r2, #2
 800062a:	17db      	asrs	r3, r3, #31
 800062c:	1ad2      	subs	r2, r2, r3
 800062e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000632:	4924      	ldr	r1, [pc, #144]	@ (80006c4 <run_automatic+0x3b4>)
 8000634:	4618      	mov	r0, r3
 8000636:	f004 f9df 	bl	80049f8 <siprintf>
		        lcd_send_string (str2);
 800063a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fcde 	bl	8001000 <lcd_send_string>
		        strcat(str1, " - ");
 8000644:	463b      	mov	r3, r7
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fd8a 	bl	8000160 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	463b      	mov	r3, r7
 8000652:	4413      	add	r3, r2
 8000654:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <run_automatic+0x3b8>)
 8000656:	6810      	ldr	r0, [r2, #0]
 8000658:	6018      	str	r0, [r3, #0]
		        strcat(str1, str2);
 800065a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800065e:	463b      	mov	r3, r7
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f004 f9f0 	bl	8004a48 <strcat>
		        strcat(str1, "\n\r");
 8000668:	463b      	mov	r3, r7
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fd78 	bl	8000160 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	463b      	mov	r3, r7
 8000676:	4413      	add	r3, r2
 8000678:	4a14      	ldr	r2, [pc, #80]	@ (80006cc <run_automatic+0x3bc>)
 800067a:	8811      	ldrh	r1, [r2, #0]
 800067c:	7892      	ldrb	r2, [r2, #2]
 800067e:	8019      	strh	r1, [r3, #0]
 8000680:	709a      	strb	r2, [r3, #2]
		        if (uart_mode1 ==1)HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <run_automatic+0x3c0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d10a      	bne.n	80006a0 <run_automatic+0x390>
 800068a:	463b      	mov	r3, r7
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fd67 	bl	8000160 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	4639      	mov	r1, r7
 8000698:	2364      	movs	r3, #100	@ 0x64
 800069a:	480e      	ldr	r0, [pc, #56]	@ (80006d4 <run_automatic+0x3c4>)
 800069c:	f003 fb92 	bl	8003dc4 <HAL_UART_Transmit>
		        //		        char str[40];
		        //		        sprintf(str, "Count1: %d - Count2: %d\n\r", count1/10,count2/10);
		        //		        HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
			}
		}
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	@ 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000130 	.word	0x20000130
 80006ac:	66666667 	.word	0x66666667
 80006b0:	080053ac 	.word	0x080053ac
 80006b4:	2000012c 	.word	0x2000012c
 80006b8:	20000134 	.word	0x20000134
 80006bc:	080053bc 	.word	0x080053bc
 80006c0:	080053c8 	.word	0x080053c8
 80006c4:	080053d8 	.word	0x080053d8
 80006c8:	080053e8 	.word	0x080053e8
 80006cc:	080053ec 	.word	0x080053ec
 80006d0:	20000138 	.word	0x20000138
 80006d4:	200001dc 	.word	0x200001dc

080006d8 <run_manual>:
#include "fsm_manual.h"

void run_manual(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0
	switch (status1){
 80006de:	4b82      	ldr	r3, [pc, #520]	@ (80008e8 <run_manual+0x210>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3b15      	subs	r3, #21
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	f200 80f7 	bhi.w	80008d8 <run_manual+0x200>
 80006ea:	a201      	add	r2, pc, #4	@ (adr r2, 80006f0 <run_manual+0x18>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000775 	.word	0x08000775
 80006f8:	080007ef 	.word	0x080007ef
 80006fc:	08000861 	.word	0x08000861
	case RED_GREEN_MAN:{
		RedLight1();
 8000700:	f000 fb76 	bl	8000df0 <RedLight1>
		GreenLight2();
 8000704:	f000 fbc8 	bl	8000e98 <GreenLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 8000708:	4b78      	ldr	r3, [pc, #480]	@ (80008ec <run_manual+0x214>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d005      	beq.n	800071c <run_manual+0x44>
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fd47 	bl	80001a4 <isButtonLongPressed>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d10d      	bne.n	8000738 <run_manual+0x60>
			count1 = time_red;
 800071c:	4b74      	ldr	r3, [pc, #464]	@ (80008f0 <run_manual+0x218>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a72      	ldr	r2, [pc, #456]	@ (80008ec <run_manual+0x214>)
 8000722:	6013      	str	r3, [r2, #0]
			count2 = time_green;
 8000724:	4b73      	ldr	r3, [pc, #460]	@ (80008f4 <run_manual+0x21c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a73      	ldr	r2, [pc, #460]	@ (80008f8 <run_manual+0x220>)
 800072a:	6013      	str	r3, [r2, #0]
			status1 = RED_LED_AUTO;
 800072c:	4b6e      	ldr	r3, [pc, #440]	@ (80008e8 <run_manual+0x210>)
 800072e:	220b      	movs	r2, #11
 8000730:	601a      	str	r2, [r3, #0]
			status2 = GREEN_LED_AUTO;
 8000732:	4b72      	ldr	r3, [pc, #456]	@ (80008fc <run_manual+0x224>)
 8000734:	220d      	movs	r2, #13
 8000736:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1 || uart_press ){
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fd19 	bl	8000170 <isButtonPressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d004      	beq.n	800074e <run_manual+0x76>
 8000744:	4b6e      	ldr	r3, [pc, #440]	@ (8000900 <run_manual+0x228>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	f000 80c7 	beq.w	80008dc <run_manual+0x204>
			uart_press=0;
 800074e:	4b6c      	ldr	r3, [pc, #432]	@ (8000900 <run_manual+0x228>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
			status1= RED_YELLOW_MAN;
 8000754:	4b64      	ldr	r3, [pc, #400]	@ (80008e8 <run_manual+0x210>)
 8000756:	2216      	movs	r2, #22
 8000758:	601a      	str	r2, [r3, #0]
			count1 = timeout*scale;
 800075a:	4b6a      	ldr	r3, [pc, #424]	@ (8000904 <run_manual+0x22c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	461a      	mov	r2, r3
 8000768:	4b60      	ldr	r3, [pc, #384]	@ (80008ec <run_manual+0x214>)
 800076a:	601a      	str	r2, [r3, #0]
			count2 = 1;
 800076c:	4b62      	ldr	r3, [pc, #392]	@ (80008f8 <run_manual+0x220>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
		}
		break;
 8000772:	e0b3      	b.n	80008dc <run_manual+0x204>
	}
	case RED_YELLOW_MAN:{
		RedLight1();
 8000774:	f000 fb3c 	bl	8000df0 <RedLight1>
		YellowLight2();
 8000778:	f000 fb7c 	bl	8000e74 <YellowLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 800077c:	4b5b      	ldr	r3, [pc, #364]	@ (80008ec <run_manual+0x214>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <run_manual+0xb8>
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fd0d 	bl	80001a4 <isButtonLongPressed>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d110      	bne.n	80007b2 <run_manual+0xda>
			count1 = time_red - time_green;
 8000790:	4b57      	ldr	r3, [pc, #348]	@ (80008f0 <run_manual+0x218>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b57      	ldr	r3, [pc, #348]	@ (80008f4 <run_manual+0x21c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	4a54      	ldr	r2, [pc, #336]	@ (80008ec <run_manual+0x214>)
 800079c:	6013      	str	r3, [r2, #0]
			count2 = time_yellow;
 800079e:	4b5a      	ldr	r3, [pc, #360]	@ (8000908 <run_manual+0x230>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a55      	ldr	r2, [pc, #340]	@ (80008f8 <run_manual+0x220>)
 80007a4:	6013      	str	r3, [r2, #0]
			status1 = RED_LED_AUTO;
 80007a6:	4b50      	ldr	r3, [pc, #320]	@ (80008e8 <run_manual+0x210>)
 80007a8:	220b      	movs	r2, #11
 80007aa:	601a      	str	r2, [r3, #0]
			status2 = YELLOW_LED_AUTO;
 80007ac:	4b53      	ldr	r3, [pc, #332]	@ (80008fc <run_manual+0x224>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1 || uart_press ){
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff fcdc 	bl	8000170 <isButtonPressed>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d004      	beq.n	80007c8 <run_manual+0xf0>
 80007be:	4b50      	ldr	r3, [pc, #320]	@ (8000900 <run_manual+0x228>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f000 808c 	beq.w	80008e0 <run_manual+0x208>
			uart_press=0;
 80007c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000900 <run_manual+0x228>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
			status1= GREEN_RED_MAN;
 80007ce:	4b46      	ldr	r3, [pc, #280]	@ (80008e8 <run_manual+0x210>)
 80007d0:	2217      	movs	r2, #23
 80007d2:	601a      	str	r2, [r3, #0]
			count1 = timeout*scale;
 80007d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000904 <run_manual+0x22c>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b42      	ldr	r3, [pc, #264]	@ (80008ec <run_manual+0x214>)
 80007e4:	601a      	str	r2, [r3, #0]
			count2 = 1;
 80007e6:	4b44      	ldr	r3, [pc, #272]	@ (80008f8 <run_manual+0x220>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
		}
		break;
 80007ec:	e078      	b.n	80008e0 <run_manual+0x208>
	}
	case GREEN_RED_MAN:{
		GreenLight1();
 80007ee:	f000 fb1f 	bl	8000e30 <GreenLight1>
		RedLight2();
 80007f2:	f000 fb2d 	bl	8000e50 <RedLight2>
		if(count1==0 || isButtonLongPressed(up_button)==1){
 80007f6:	4b3d      	ldr	r3, [pc, #244]	@ (80008ec <run_manual+0x214>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d005      	beq.n	800080a <run_manual+0x132>
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fcd0 	bl	80001a4 <isButtonLongPressed>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10d      	bne.n	8000826 <run_manual+0x14e>
			count1 = time_green;
 800080a:	4b3a      	ldr	r3, [pc, #232]	@ (80008f4 <run_manual+0x21c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a37      	ldr	r2, [pc, #220]	@ (80008ec <run_manual+0x214>)
 8000810:	6013      	str	r3, [r2, #0]
			count2 = time_red;
 8000812:	4b37      	ldr	r3, [pc, #220]	@ (80008f0 <run_manual+0x218>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a38      	ldr	r2, [pc, #224]	@ (80008f8 <run_manual+0x220>)
 8000818:	6013      	str	r3, [r2, #0]
			status1 = GREEN_LED_AUTO;
 800081a:	4b33      	ldr	r3, [pc, #204]	@ (80008e8 <run_manual+0x210>)
 800081c:	220d      	movs	r2, #13
 800081e:	601a      	str	r2, [r3, #0]
			status2 = RED_LED_AUTO;
 8000820:	4b36      	ldr	r3, [pc, #216]	@ (80008fc <run_manual+0x224>)
 8000822:	220b      	movs	r2, #11
 8000824:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(up_button)==1 || uart_press){
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fca2 	bl	8000170 <isButtonPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d003      	beq.n	800083a <run_manual+0x162>
 8000832:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <run_manual+0x228>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d054      	beq.n	80008e4 <run_manual+0x20c>
			uart_press=0;
 800083a:	4b31      	ldr	r3, [pc, #196]	@ (8000900 <run_manual+0x228>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
			status1= YELLOW_RED_MAN;
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <run_manual+0x210>)
 8000842:	2218      	movs	r2, #24
 8000844:	601a      	str	r2, [r3, #0]
			count1 = timeout*scale;
 8000846:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <run_manual+0x22c>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	461a      	mov	r2, r3
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <run_manual+0x214>)
 8000856:	601a      	str	r2, [r3, #0]
			count2 = 1;
 8000858:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <run_manual+0x220>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
		}
		break;
 800085e:	e041      	b.n	80008e4 <run_manual+0x20c>
	}
	case YELLOW_RED_MAN:{
			YellowLight1();
 8000860:	f000 fad6 	bl	8000e10 <YellowLight1>
			RedLight2();
 8000864:	f000 faf4 	bl	8000e50 <RedLight2>
			if(count1==0 || isButtonLongPressed(up_button)==1){
 8000868:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <run_manual+0x214>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <run_manual+0x1a4>
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fc97 	bl	80001a4 <isButtonLongPressed>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	d110      	bne.n	800089e <run_manual+0x1c6>
				count1 = time_yellow;
 800087c:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <run_manual+0x230>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1a      	ldr	r2, [pc, #104]	@ (80008ec <run_manual+0x214>)
 8000882:	6013      	str	r3, [r2, #0]
				count2 = time_red - time_green ;
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <run_manual+0x218>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <run_manual+0x21c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	4a1a      	ldr	r2, [pc, #104]	@ (80008f8 <run_manual+0x220>)
 8000890:	6013      	str	r3, [r2, #0]
				status1 = YELLOW_LED_AUTO;
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <run_manual+0x210>)
 8000894:	220c      	movs	r2, #12
 8000896:	601a      	str	r2, [r3, #0]
				status2 = RED_LED_AUTO;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <run_manual+0x224>)
 800089a:	220b      	movs	r2, #11
 800089c:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(up_button)==1 || uart_press){
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fc66 	bl	8000170 <isButtonPressed>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d003      	beq.n	80008b2 <run_manual+0x1da>
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <run_manual+0x228>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d02c      	beq.n	800090c <run_manual+0x234>
				uart_press =0;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <run_manual+0x228>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
				status1= RED_GREEN_MAN;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <run_manual+0x210>)
 80008ba:	2215      	movs	r2, #21
 80008bc:	601a      	str	r2, [r3, #0]
				count1 = timeout*scale;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <run_manual+0x22c>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <run_manual+0x214>)
 80008ce:	601a      	str	r2, [r3, #0]
				count2 = 1;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <run_manual+0x220>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	601a      	str	r2, [r3, #0]
			}
			break;
 80008d6:	e019      	b.n	800090c <run_manual+0x234>

	}
	default:
		break;
 80008d8:	bf00      	nop
 80008da:	e018      	b.n	800090e <run_manual+0x236>
		break;
 80008dc:	bf00      	nop
 80008de:	e016      	b.n	800090e <run_manual+0x236>
		break;
 80008e0:	bf00      	nop
 80008e2:	e014      	b.n	800090e <run_manual+0x236>
		break;
 80008e4:	bf00      	nop
 80008e6:	e012      	b.n	800090e <run_manual+0x236>
 80008e8:	20000128 	.word	0x20000128
 80008ec:	20000130 	.word	0x20000130
 80008f0:	20000068 	.word	0x20000068
 80008f4:	20000070 	.word	0x20000070
 80008f8:	20000134 	.word	0x20000134
 80008fc:	2000012c 	.word	0x2000012c
 8000900:	2000013c 	.word	0x2000013c
 8000904:	20000078 	.word	0x20000078
 8000908:	2000006c 	.word	0x2000006c
			break;
 800090c:	bf00      	nop
	}
	if((status1/10)==2 && count1>0)count1--;
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <run_manual+0x2d0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3b14      	subs	r3, #20
 8000914:	2b09      	cmp	r3, #9
 8000916:	d808      	bhi.n	800092a <run_manual+0x252>
 8000918:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <run_manual+0x2d4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	dd04      	ble.n	800092a <run_manual+0x252>
 8000920:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <run_manual+0x2d4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	4a21      	ldr	r2, [pc, #132]	@ (80009ac <run_manual+0x2d4>)
 8000928:	6013      	str	r3, [r2, #0]
	if((status1/10)==2 && count3>0 ){
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <run_manual+0x2d0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3b14      	subs	r3, #20
 8000930:	2b09      	cmp	r3, #9
 8000932:	d835      	bhi.n	80009a0 <run_manual+0x2c8>
 8000934:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <run_manual+0x2d8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd31      	ble.n	80009a0 <run_manual+0x2c8>
				count3--;
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <run_manual+0x2d8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	4a1b      	ldr	r2, [pc, #108]	@ (80009b0 <run_manual+0x2d8>)
 8000944:	6013      	str	r3, [r2, #0]
				if(count3 ==0){
 8000946:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <run_manual+0x2d8>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d128      	bne.n	80009a0 <run_manual+0x2c8>
					count3 = scale;
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <run_manual+0x2d8>)
 8000950:	220a      	movs	r2, #10
 8000952:	601a      	str	r2, [r3, #0]
	//		        char str[40];
	//		        sprintf(str, "Count1: %d - Count2: %d\n\r", count1/10,count2/10);
	//		        HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);

			        //LCD L1
			        lcd_clear_display();
 8000954:	f000 fb69 	bl	800102a <lcd_clear_display>
			        lcd_goto_XY (1, 0);
 8000958:	2100      	movs	r1, #0
 800095a:	2001      	movs	r0, #1
 800095c:	f000 fb6c 	bl	8001038 <lcd_goto_XY>
			        char str1[20];
			        sprintf(str1, " MANNUAL MODE");
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4913      	ldr	r1, [pc, #76]	@ (80009b4 <run_manual+0x2dc>)
 8000966:	4618      	mov	r0, r3
 8000968:	f004 f846 	bl	80049f8 <siprintf>
			        lcd_send_string (str1);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fb45 	bl	8001000 <lcd_send_string>
			        //LCD L2
			        lcd_goto_XY (0, 0);
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fb5d 	bl	8001038 <lcd_goto_XY>
			        char str2[20];
			        sprintf(str2, "TIME LEFT: %d", count1/10);
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <run_manual+0x2d4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a0d      	ldr	r2, [pc, #52]	@ (80009b8 <run_manual+0x2e0>)
 8000984:	fb82 1203 	smull	r1, r2, r2, r3
 8000988:	1092      	asrs	r2, r2, #2
 800098a:	17db      	asrs	r3, r3, #31
 800098c:	1ad2      	subs	r2, r2, r3
 800098e:	463b      	mov	r3, r7
 8000990:	490a      	ldr	r1, [pc, #40]	@ (80009bc <run_manual+0x2e4>)
 8000992:	4618      	mov	r0, r3
 8000994:	f004 f830 	bl	80049f8 <siprintf>
			        lcd_send_string (str2);
 8000998:	463b      	mov	r3, r7
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fb30 	bl	8001000 <lcd_send_string>
				}
	}

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	@ 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000128 	.word	0x20000128
 80009ac:	20000130 	.word	0x20000130
 80009b0:	20000074 	.word	0x20000074
 80009b4:	080053f0 	.word	0x080053f0
 80009b8:	66666667 	.word	0x66666667
 80009bc:	08005400 	.word	0x08005400

080009c0 <run_setting>:
int tmp_yellow=0;
int tmp_green=0;
int flag =1;
int flag1 = 0;

void run_setting(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
	if ((status1/10)!=3){
 80009c6:	4b7d      	ldr	r3, [pc, #500]	@ (8000bbc <run_setting+0x1fc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3b1e      	subs	r3, #30
 80009cc:	2b09      	cmp	r3, #9
 80009ce:	d91c      	bls.n	8000a0a <run_setting+0x4a>
		if(isButtonLongPressed(set_button)){
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff fbe7 	bl	80001a4 <isButtonLongPressed>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d016      	beq.n	8000a0a <run_setting+0x4a>
			count3=1*scale;
 80009dc:	4b78      	ldr	r3, [pc, #480]	@ (8000bc0 <run_setting+0x200>)
 80009de:	220a      	movs	r2, #10
 80009e0:	601a      	str	r2, [r3, #0]
			status1 = RED_LED_SET;
 80009e2:	4b76      	ldr	r3, [pc, #472]	@ (8000bbc <run_setting+0x1fc>)
 80009e4:	221f      	movs	r2, #31
 80009e6:	601a      	str	r2, [r3, #0]
			status2 = RED_LED_SET;
 80009e8:	4b76      	ldr	r3, [pc, #472]	@ (8000bc4 <run_setting+0x204>)
 80009ea:	221f      	movs	r2, #31
 80009ec:	601a      	str	r2, [r3, #0]
			count1 = 2; //Mode
 80009ee:	4b76      	ldr	r3, [pc, #472]	@ (8000bc8 <run_setting+0x208>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
			count2 = time_red; //Value
 80009f4:	4b75      	ldr	r3, [pc, #468]	@ (8000bcc <run_setting+0x20c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a75      	ldr	r2, [pc, #468]	@ (8000bd0 <run_setting+0x210>)
 80009fa:	6013      	str	r3, [r2, #0]
			ResetLight1();
 80009fc:	f000 f9d6 	bl	8000dac <ResetLight1>
			ResetLight2();
 8000a00:	f000 f9e4 	bl	8000dcc <ResetLight2>
			flag=1;
 8000a04:	4b73      	ldr	r3, [pc, #460]	@ (8000bd4 <run_setting+0x214>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
		}
	}
	switch (status1){
 8000a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8000bbc <run_setting+0x1fc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b21      	cmp	r3, #33	@ 0x21
 8000a10:	f000 80ec 	beq.w	8000bec <run_setting+0x22c>
 8000a14:	2b21      	cmp	r3, #33	@ 0x21
 8000a16:	f300 8148 	bgt.w	8000caa <run_setting+0x2ea>
 8000a1a:	2b1f      	cmp	r3, #31
 8000a1c:	d002      	beq.n	8000a24 <run_setting+0x64>
 8000a1e:	2b20      	cmp	r3, #32
 8000a20:	d06a      	beq.n	8000af8 <run_setting+0x138>

		}
		break;
	}
	default:
			break;
 8000a22:	e142      	b.n	8000caa <run_setting+0x2ea>
		if(count3==0){
 8000a24:	4b66      	ldr	r3, [pc, #408]	@ (8000bc0 <run_setting+0x200>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d113      	bne.n	8000a54 <run_setting+0x94>
			count3=1*scale;
 8000a2c:	4b64      	ldr	r3, [pc, #400]	@ (8000bc0 <run_setting+0x200>)
 8000a2e:	220a      	movs	r2, #10
 8000a30:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, A1);
 8000a32:	2120      	movs	r1, #32
 8000a34:	4868      	ldr	r0, [pc, #416]	@ (8000bd8 <run_setting+0x218>)
 8000a36:	f001 fcbe 	bl	80023b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, B1);
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	4866      	ldr	r0, [pc, #408]	@ (8000bd8 <run_setting+0x218>)
 8000a3e:	f001 fcba 	bl	80023b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, A2);
 8000a42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a46:	4864      	ldr	r0, [pc, #400]	@ (8000bd8 <run_setting+0x218>)
 8000a48:	f001 fcb5 	bl	80023b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, B2);
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	4862      	ldr	r0, [pc, #392]	@ (8000bd8 <run_setting+0x218>)
 8000a50:	f001 fcb1 	bl	80023b6 <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff fba5 	bl	80001a4 <isButtonLongPressed>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d121      	bne.n	8000aa4 <run_setting+0xe4>
			status1 = YELLOW_LED_SET;
 8000a60:	4b56      	ldr	r3, [pc, #344]	@ (8000bbc <run_setting+0x1fc>)
 8000a62:	2220      	movs	r2, #32
 8000a64:	601a      	str	r2, [r3, #0]
			count1 = 3;
 8000a66:	4b58      	ldr	r3, [pc, #352]	@ (8000bc8 <run_setting+0x208>)
 8000a68:	2203      	movs	r2, #3
 8000a6a:	601a      	str	r2, [r3, #0]
			count2 = time_yellow;
 8000a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8000bdc <run_setting+0x21c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a57      	ldr	r2, [pc, #348]	@ (8000bd0 <run_setting+0x210>)
 8000a72:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB,A1, RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2120      	movs	r1, #32
 8000a78:	4857      	ldr	r0, [pc, #348]	@ (8000bd8 <run_setting+0x218>)
 8000a7a:	f001 fc84 	bl	8002386 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,B1, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	4855      	ldr	r0, [pc, #340]	@ (8000bd8 <run_setting+0x218>)
 8000a84:	f001 fc7f 	bl	8002386 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,A2, RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8e:	4852      	ldr	r0, [pc, #328]	@ (8000bd8 <run_setting+0x218>)
 8000a90:	f001 fc79 	bl	8002386 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,B2, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2110      	movs	r1, #16
 8000a98:	484f      	ldr	r0, [pc, #316]	@ (8000bd8 <run_setting+0x218>)
 8000a9a:	f001 fc74 	bl	8002386 <HAL_GPIO_WritePin>
			flag =1;
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd4 <run_setting+0x214>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(up_button)==1){
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fb63 	bl	8000170 <isButtonPressed>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d110      	bne.n	8000ad2 <run_setting+0x112>
			count2+= scale;
 8000ab0:	4b47      	ldr	r3, [pc, #284]	@ (8000bd0 <run_setting+0x210>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	330a      	adds	r3, #10
 8000ab6:	4a46      	ldr	r2, [pc, #280]	@ (8000bd0 <run_setting+0x210>)
 8000ab8:	6013      	str	r3, [r2, #0]
			if(count2 > 99*scale)count2 =scale;
 8000aba:	4b45      	ldr	r3, [pc, #276]	@ (8000bd0 <run_setting+0x210>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f240 32de 	movw	r2, #990	@ 0x3de
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	dd02      	ble.n	8000acc <run_setting+0x10c>
 8000ac6:	4b42      	ldr	r3, [pc, #264]	@ (8000bd0 <run_setting+0x210>)
 8000ac8:	220a      	movs	r2, #10
 8000aca:	601a      	str	r2, [r3, #0]
			flag=1;
 8000acc:	4b41      	ldr	r3, [pc, #260]	@ (8000bd4 <run_setting+0x214>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff fb4c 	bl	8000170 <isButtonPressed>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	f040 80e7 	bne.w	8000cae <run_setting+0x2ee>
			tmp_red = count2;
 8000ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8000bd0 <run_setting+0x210>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8000be0 <run_setting+0x220>)
 8000ae6:	6013      	str	r3, [r2, #0]
			count3 = 3*scale;
 8000ae8:	4b35      	ldr	r3, [pc, #212]	@ (8000bc0 <run_setting+0x200>)
 8000aea:	221e      	movs	r2, #30
 8000aec:	601a      	str	r2, [r3, #0]
			RedLight1();
 8000aee:	f000 f97f 	bl	8000df0 <RedLight1>
			RedLight2();
 8000af2:	f000 f9ad 	bl	8000e50 <RedLight2>
		break;
 8000af6:	e0da      	b.n	8000cae <run_setting+0x2ee>
		if(count3==0){
 8000af8:	4b31      	ldr	r3, [pc, #196]	@ (8000bc0 <run_setting+0x200>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d10b      	bne.n	8000b18 <run_setting+0x158>
			count3=1*scale;
 8000b00:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <run_setting+0x200>)
 8000b02:	220a      	movs	r2, #10
 8000b04:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, A1);
 8000b06:	2120      	movs	r1, #32
 8000b08:	4833      	ldr	r0, [pc, #204]	@ (8000bd8 <run_setting+0x218>)
 8000b0a:	f001 fc54 	bl	80023b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, A2);
 8000b0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b12:	4831      	ldr	r0, [pc, #196]	@ (8000bd8 <run_setting+0x218>)
 8000b14:	f001 fc4f 	bl	80023b6 <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fb43 	bl	80001a4 <isButtonLongPressed>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d121      	bne.n	8000b68 <run_setting+0x1a8>
			status1 = GREEN_LED_SET;
 8000b24:	4b25      	ldr	r3, [pc, #148]	@ (8000bbc <run_setting+0x1fc>)
 8000b26:	2221      	movs	r2, #33	@ 0x21
 8000b28:	601a      	str	r2, [r3, #0]
			count1 = 4;
 8000b2a:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <run_setting+0x208>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	601a      	str	r2, [r3, #0]
			count2 = time_green;
 8000b30:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <run_setting+0x224>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a26      	ldr	r2, [pc, #152]	@ (8000bd0 <run_setting+0x210>)
 8000b36:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB,A1, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2120      	movs	r1, #32
 8000b3c:	4826      	ldr	r0, [pc, #152]	@ (8000bd8 <run_setting+0x218>)
 8000b3e:	f001 fc22 	bl	8002386 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,B1, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2108      	movs	r1, #8
 8000b46:	4824      	ldr	r0, [pc, #144]	@ (8000bd8 <run_setting+0x218>)
 8000b48:	f001 fc1d 	bl	8002386 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,A2, RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b52:	4821      	ldr	r0, [pc, #132]	@ (8000bd8 <run_setting+0x218>)
 8000b54:	f001 fc17 	bl	8002386 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,B2, RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	481e      	ldr	r0, [pc, #120]	@ (8000bd8 <run_setting+0x218>)
 8000b5e:	f001 fc12 	bl	8002386 <HAL_GPIO_WritePin>
			flag =1;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <run_setting+0x214>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(up_button)==1){
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fb01 	bl	8000170 <isButtonPressed>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d110      	bne.n	8000b96 <run_setting+0x1d6>
			count2+=scale;
 8000b74:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <run_setting+0x210>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	330a      	adds	r3, #10
 8000b7a:	4a15      	ldr	r2, [pc, #84]	@ (8000bd0 <run_setting+0x210>)
 8000b7c:	6013      	str	r3, [r2, #0]
			if(count2 > 99* scale)count2 =scale;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <run_setting+0x210>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f240 32de 	movw	r2, #990	@ 0x3de
 8000b86:	4293      	cmp	r3, r2
 8000b88:	dd02      	ble.n	8000b90 <run_setting+0x1d0>
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <run_setting+0x210>)
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	601a      	str	r2, [r3, #0]
			flag=1;
 8000b90:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <run_setting+0x214>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff faea 	bl	8000170 <isButtonPressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	f040 8087 	bne.w	8000cb2 <run_setting+0x2f2>
			tmp_yellow = count2;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <run_setting+0x210>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <run_setting+0x228>)
 8000baa:	6013      	str	r3, [r2, #0]
			count3 = 3*scale;
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <run_setting+0x200>)
 8000bae:	221e      	movs	r2, #30
 8000bb0:	601a      	str	r2, [r3, #0]
			YellowLight1();
 8000bb2:	f000 f92d 	bl	8000e10 <YellowLight1>
			YellowLight2();
 8000bb6:	f000 f95d 	bl	8000e74 <YellowLight2>
		break;
 8000bba:	e07a      	b.n	8000cb2 <run_setting+0x2f2>
 8000bbc:	20000128 	.word	0x20000128
 8000bc0:	20000074 	.word	0x20000074
 8000bc4:	2000012c 	.word	0x2000012c
 8000bc8:	20000130 	.word	0x20000130
 8000bcc:	20000068 	.word	0x20000068
 8000bd0:	20000134 	.word	0x20000134
 8000bd4:	20000064 	.word	0x20000064
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	2000006c 	.word	0x2000006c
 8000be0:	2000011c 	.word	0x2000011c
 8000be4:	20000070 	.word	0x20000070
 8000be8:	20000120 	.word	0x20000120
		if(count3==0){
 8000bec:	4b5d      	ldr	r3, [pc, #372]	@ (8000d64 <run_setting+0x3a4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10a      	bne.n	8000c0a <run_setting+0x24a>
			count3=1*scale;
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d64 <run_setting+0x3a4>)
 8000bf6:	220a      	movs	r2, #10
 8000bf8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, B1);
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	485a      	ldr	r0, [pc, #360]	@ (8000d68 <run_setting+0x3a8>)
 8000bfe:	f001 fbda 	bl	80023b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, B2);
 8000c02:	2110      	movs	r1, #16
 8000c04:	4858      	ldr	r0, [pc, #352]	@ (8000d68 <run_setting+0x3a8>)
 8000c06:	f001 fbd6 	bl	80023b6 <HAL_GPIO_TogglePin>
		if(isButtonLongPressed(set_button)==1){
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff faca 	bl	80001a4 <isButtonLongPressed>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d120      	bne.n	8000c58 <run_setting+0x298>
			if(tmp_red == tmp_green + tmp_yellow){
 8000c16:	4b55      	ldr	r3, [pc, #340]	@ (8000d6c <run_setting+0x3ac>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b55      	ldr	r3, [pc, #340]	@ (8000d70 <run_setting+0x3b0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	441a      	add	r2, r3
 8000c20:	4b54      	ldr	r3, [pc, #336]	@ (8000d74 <run_setting+0x3b4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d10b      	bne.n	8000c40 <run_setting+0x280>
				time_red=tmp_red;
 8000c28:	4b52      	ldr	r3, [pc, #328]	@ (8000d74 <run_setting+0x3b4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a52      	ldr	r2, [pc, #328]	@ (8000d78 <run_setting+0x3b8>)
 8000c2e:	6013      	str	r3, [r2, #0]
				time_yellow=tmp_yellow;
 8000c30:	4b4f      	ldr	r3, [pc, #316]	@ (8000d70 <run_setting+0x3b0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a51      	ldr	r2, [pc, #324]	@ (8000d7c <run_setting+0x3bc>)
 8000c36:	6013      	str	r3, [r2, #0]
				time_green=tmp_green;
 8000c38:	4b4c      	ldr	r3, [pc, #304]	@ (8000d6c <run_setting+0x3ac>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a50      	ldr	r2, [pc, #320]	@ (8000d80 <run_setting+0x3c0>)
 8000c3e:	6013      	str	r3, [r2, #0]
			status1 = INIT;
 8000c40:	4b50      	ldr	r3, [pc, #320]	@ (8000d84 <run_setting+0x3c4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
			status2 = INIT;
 8000c46:	4b50      	ldr	r3, [pc, #320]	@ (8000d88 <run_setting+0x3c8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
			count1 = 0;
 8000c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d8c <run_setting+0x3cc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
			count2 = 0;
 8000c52:	4b4f      	ldr	r3, [pc, #316]	@ (8000d90 <run_setting+0x3d0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(up_button)==1 ){
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fa89 	bl	8000170 <isButtonPressed>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d110      	bne.n	8000c86 <run_setting+0x2c6>
			count2+=scale;
 8000c64:	4b4a      	ldr	r3, [pc, #296]	@ (8000d90 <run_setting+0x3d0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	330a      	adds	r3, #10
 8000c6a:	4a49      	ldr	r2, [pc, #292]	@ (8000d90 <run_setting+0x3d0>)
 8000c6c:	6013      	str	r3, [r2, #0]
			if(count2 > 99*scale)count2 =scale;
 8000c6e:	4b48      	ldr	r3, [pc, #288]	@ (8000d90 <run_setting+0x3d0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f240 32de 	movw	r2, #990	@ 0x3de
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dd02      	ble.n	8000c80 <run_setting+0x2c0>
 8000c7a:	4b45      	ldr	r3, [pc, #276]	@ (8000d90 <run_setting+0x3d0>)
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	601a      	str	r2, [r3, #0]
			flag=1;
 8000c80:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <run_setting+0x3d4>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(set_button)==1){
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fa72 	bl	8000170 <isButtonPressed>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d111      	bne.n	8000cb6 <run_setting+0x2f6>
			tmp_green = count2;
 8000c92:	4b3f      	ldr	r3, [pc, #252]	@ (8000d90 <run_setting+0x3d0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a35      	ldr	r2, [pc, #212]	@ (8000d6c <run_setting+0x3ac>)
 8000c98:	6013      	str	r3, [r2, #0]
			count3 = 3*scale;
 8000c9a:	4b32      	ldr	r3, [pc, #200]	@ (8000d64 <run_setting+0x3a4>)
 8000c9c:	221e      	movs	r2, #30
 8000c9e:	601a      	str	r2, [r3, #0]
			GreenLight1();
 8000ca0:	f000 f8c6 	bl	8000e30 <GreenLight1>
			GreenLight2();
 8000ca4:	f000 f8f8 	bl	8000e98 <GreenLight2>
		break;
 8000ca8:	e005      	b.n	8000cb6 <run_setting+0x2f6>
			break;
 8000caa:	bf00      	nop
 8000cac:	e004      	b.n	8000cb8 <run_setting+0x2f8>
		break;
 8000cae:	bf00      	nop
 8000cb0:	e002      	b.n	8000cb8 <run_setting+0x2f8>
		break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <run_setting+0x2f8>
		break;
 8000cb6:	bf00      	nop
	}
	if((status1/10)==3 && count3>0)count3--;
 8000cb8:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <run_setting+0x3c4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3b1e      	subs	r3, #30
 8000cbe:	2b09      	cmp	r3, #9
 8000cc0:	d808      	bhi.n	8000cd4 <run_setting+0x314>
 8000cc2:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <run_setting+0x3a4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd04      	ble.n	8000cd4 <run_setting+0x314>
 8000cca:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <run_setting+0x3a4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a24      	ldr	r2, [pc, #144]	@ (8000d64 <run_setting+0x3a4>)
 8000cd2:	6013      	str	r3, [r2, #0]
	if((status1/10)==3 && flag == 1){
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d84 <run_setting+0x3c4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3b1e      	subs	r3, #30
 8000cda:	2b09      	cmp	r3, #9
 8000cdc:	d83e      	bhi.n	8000d5c <run_setting+0x39c>
 8000cde:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <run_setting+0x3d4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d13a      	bne.n	8000d5c <run_setting+0x39c>
		lcd_clear_display();
 8000ce6:	f000 f9a0 	bl	800102a <lcd_clear_display>
		flag=0;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <run_setting+0x3d4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
		char str1[20];
		if(status1 == RED_LED_SET )sprintf(str1, "  SETTING RED");
 8000cf0:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <run_setting+0x3c4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b1f      	cmp	r3, #31
 8000cf6:	d106      	bne.n	8000d06 <run_setting+0x346>
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4926      	ldr	r1, [pc, #152]	@ (8000d98 <run_setting+0x3d8>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fe7a 	bl	80049f8 <siprintf>
 8000d04:	e010      	b.n	8000d28 <run_setting+0x368>
		else if(status1 == GREEN_LED_SET)sprintf(str1,"  SETTING GREEN");
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <run_setting+0x3c4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b21      	cmp	r3, #33	@ 0x21
 8000d0c:	d106      	bne.n	8000d1c <run_setting+0x35c>
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4922      	ldr	r1, [pc, #136]	@ (8000d9c <run_setting+0x3dc>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 fe6f 	bl	80049f8 <siprintf>
 8000d1a:	e005      	b.n	8000d28 <run_setting+0x368>
		else sprintf(str1, "  SETTING YELLOW");
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	491f      	ldr	r1, [pc, #124]	@ (8000da0 <run_setting+0x3e0>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fe68 	bl	80049f8 <siprintf>
		lcd_send_string (str1);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f967 	bl	8001000 <lcd_send_string>
		lcd_goto_XY (0, 0);
 8000d32:	2100      	movs	r1, #0
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 f97f 	bl	8001038 <lcd_goto_XY>
		char str2[20];
		sprintf(str2, "TIME: %d", count2/10);
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <run_setting+0x3d0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a19      	ldr	r2, [pc, #100]	@ (8000da4 <run_setting+0x3e4>)
 8000d40:	fb82 1203 	smull	r1, r2, r2, r3
 8000d44:	1092      	asrs	r2, r2, #2
 8000d46:	17db      	asrs	r3, r3, #31
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4916      	ldr	r1, [pc, #88]	@ (8000da8 <run_setting+0x3e8>)
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fe52 	bl	80049f8 <siprintf>
		lcd_send_string (str2);
 8000d54:	463b      	mov	r3, r7
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f952 	bl	8001000 <lcd_send_string>
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	@ 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000074 	.word	0x20000074
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	20000124 	.word	0x20000124
 8000d70:	20000120 	.word	0x20000120
 8000d74:	2000011c 	.word	0x2000011c
 8000d78:	20000068 	.word	0x20000068
 8000d7c:	2000006c 	.word	0x2000006c
 8000d80:	20000070 	.word	0x20000070
 8000d84:	20000128 	.word	0x20000128
 8000d88:	2000012c 	.word	0x2000012c
 8000d8c:	20000130 	.word	0x20000130
 8000d90:	20000134 	.word	0x20000134
 8000d94:	20000064 	.word	0x20000064
 8000d98:	08005410 	.word	0x08005410
 8000d9c:	08005420 	.word	0x08005420
 8000da0:	08005430 	.word	0x08005430
 8000da4:	66666667 	.word	0x66666667
 8000da8:	08005444 	.word	0x08005444

08000dac <ResetLight1>:

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

void ResetLight1(){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A1, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2120      	movs	r1, #32
 8000db4:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <ResetLight1+0x1c>)
 8000db6:	f001 fae6 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B1 , RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <ResetLight1+0x1c>)
 8000dc0:	f001 fae1 	bl	8002386 <HAL_GPIO_WritePin>

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <ResetLight2>:

void ResetLight2(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A2, RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <ResetLight2+0x20>)
 8000dd8:	f001 fad5 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B2 , RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <ResetLight2+0x20>)
 8000de2:	f001 fad0 	bl	8002386 <HAL_GPIO_WritePin>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <RedLight1>:
void RedLight1(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A1, SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2120      	movs	r1, #32
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <RedLight1+0x1c>)
 8000dfa:	f001 fac4 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B1 , SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2108      	movs	r1, #8
 8000e02:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <RedLight1+0x1c>)
 8000e04:	f001 fabf 	bl	8002386 <HAL_GPIO_WritePin>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010c00 	.word	0x40010c00

08000e10 <YellowLight1>:
void YellowLight1(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A1, SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2120      	movs	r1, #32
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <YellowLight1+0x1c>)
 8000e1a:	f001 fab4 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B1 , RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2108      	movs	r1, #8
 8000e22:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <YellowLight1+0x1c>)
 8000e24:	f001 faaf 	bl	8002386 <HAL_GPIO_WritePin>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <GreenLight1>:

void GreenLight1(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A1, RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2120      	movs	r1, #32
 8000e38:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <GreenLight1+0x1c>)
 8000e3a:	f001 faa4 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B1 , SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2108      	movs	r1, #8
 8000e42:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <GreenLight1+0x1c>)
 8000e44:	f001 fa9f 	bl	8002386 <HAL_GPIO_WritePin>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <RedLight2>:
void RedLight2(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A2, SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <RedLight2+0x20>)
 8000e5c:	f001 fa93 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B2 , SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <RedLight2+0x20>)
 8000e66:	f001 fa8e 	bl	8002386 <HAL_GPIO_WritePin>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <YellowLight2>:
void YellowLight2(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A2, SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <YellowLight2+0x20>)
 8000e80:	f001 fa81 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B2 , RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <YellowLight2+0x20>)
 8000e8a:	f001 fa7c 	bl	8002386 <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40010c00 	.word	0x40010c00

08000e98 <GreenLight2>:
void GreenLight2(){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A2, RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea2:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <GreenLight2+0x20>)
 8000ea4:	f001 fa6f 	bl	8002386 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B2 , SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <GreenLight2+0x20>)
 8000eae:	f001 fa6a 	bl	8002386 <HAL_GPIO_WritePin>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <BlinkLed>:

void BlinkLed(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_PINK);
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <BlinkLed+0x10>)
 8000ec4:	f001 fa77 	bl	80023b6 <HAL_GPIO_TogglePin>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <Run_Traffic_Light>:

void Run_Traffic_Light(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	run_setting();
 8000ed4:	f7ff fd74 	bl	80009c0 <run_setting>
	run_manual();
 8000ed8:	f7ff fbfe 	bl	80006d8 <run_manual>
	run_automatic();
 8000edc:	f7ff fa18 	bl	8000310 <run_automatic>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 030c 	orr.w	r3, r3, #12
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	f043 030c 	orr.w	r3, r3, #12
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	2142      	movs	r1, #66	@ 0x42
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <lcd_send_cmd+0x5c>)
 8000f32:	f001 fb9d 	bl	8002670 <HAL_I2C_Master_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000140 	.word	0x20000140

08000f44 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 030d 	orr.w	r3, r3, #13
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f043 0309 	orr.w	r3, r3, #9
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	f043 030d 	orr.w	r3, r3, #13
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	f043 0309 	orr.w	r3, r3, #9
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	2142      	movs	r1, #66	@ 0x42
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <lcd_send_data+0x5c>)
 8000f92:	f001 fb6d 	bl	8002670 <HAL_I2C_Master_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000140 	.word	0x20000140

08000fa4 <lcd_init>:

void lcd_init (void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000fa8:	2033      	movs	r0, #51	@ 0x33
 8000faa:	f7ff ff9b 	bl	8000ee4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000fae:	2032      	movs	r0, #50	@ 0x32
 8000fb0:	f7ff ff98 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(50);
 8000fb4:	2032      	movs	r0, #50	@ 0x32
 8000fb6:	f000 fe67 	bl	8001c88 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000fba:	2028      	movs	r0, #40	@ 0x28
 8000fbc:	f7ff ff92 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(50);
 8000fc0:	2032      	movs	r0, #50	@ 0x32
 8000fc2:	f000 fe61 	bl	8001c88 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff ff8c 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(50);
 8000fcc:	2032      	movs	r0, #50	@ 0x32
 8000fce:	f000 fe5b 	bl	8001c88 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f7ff ff86 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(50);
 8000fd8:	2032      	movs	r0, #50	@ 0x32
 8000fda:	f000 fe55 	bl	8001c88 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f7ff ff80 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(50);
 8000fe4:	2032      	movs	r0, #50	@ 0x32
 8000fe6:	f000 fe4f 	bl	8001c88 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000fea:	2002      	movs	r0, #2
 8000fec:	f7ff ff7a 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ff0:	2032      	movs	r0, #50	@ 0x32
 8000ff2:	f000 fe49 	bl	8001c88 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000ff6:	2080      	movs	r0, #128	@ 0x80
 8000ff8:	f7ff ff74 	bl	8000ee4 <lcd_send_cmd>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001008:	e006      	b.n	8001018 <lcd_send_string+0x18>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff96 	bl	8000f44 <lcd_send_data>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f4      	bne.n	800100a <lcd_send_string+0xa>
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <lcd_clear_display>:

void lcd_clear_display (void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff ff58 	bl	8000ee4 <lcd_send_cmd>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d108      	bne.n	800105a <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4413      	add	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	337f      	adds	r3, #127	@ 0x7f
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e008      	b.n	800106c <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	3340      	adds	r3, #64	@ 0x40
 8001060:	b2db      	uxtb	r3, r3
 8001062:	b25b      	sxtb	r3, r3
 8001064:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001068:	b25b      	sxtb	r3, r3
 800106a:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff38 	bl	8000ee4 <lcd_send_cmd>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001080:	f000 fda0 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001084:	f000 f82c 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001088:	f000 f90a 	bl	80012a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800108c:	f000 f864 	bl	8001158 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001090:	f000 f890 	bl	80011b4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001094:	f000 f8da 	bl	800124c <MX_USART2_UART_Init>
  lcd_init();
 8001098:	f7ff ff84 	bl	8000fa4 <lcd_init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 800109c:	480b      	ldr	r0, [pc, #44]	@ (80010cc <main+0x50>)
 800109e:	f002 fa9f 	bl	80035e0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	490a      	ldr	r1, [pc, #40]	@ (80010d0 <main+0x54>)
 80010a6:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <main+0x58>)
 80010a8:	f002 ff17 	bl	8003eda <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80010ac:	f000 fa30 	bl	8001510 <SCH_Init>
  SCH_Add_Task(BlinkLed,0,1000);
 80010b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b4:	2100      	movs	r1, #0
 80010b6:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <main+0x5c>)
 80010b8:	f000 fab4 	bl	8001624 <SCH_Add_Task>
  SCH_Add_Task(Run_Traffic_Light,0,100);
 80010bc:	2264      	movs	r2, #100	@ 0x64
 80010be:	2100      	movs	r1, #0
 80010c0:	4806      	ldr	r0, [pc, #24]	@ (80010dc <main+0x60>)
 80010c2:	f000 faaf 	bl	8001624 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task() ;
 80010c6:	f000 fb5b 	bl	8001780 <SCH_Dispatch_Task>
 80010ca:	e7fc      	b.n	80010c6 <main+0x4a>
 80010cc:	20000194 	.word	0x20000194
 80010d0:	20000228 	.word	0x20000228
 80010d4:	200001dc 	.word	0x200001dc
 80010d8:	08000ebd 	.word	0x08000ebd
 80010dc:	08000ed1 	.word	0x08000ed1

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b090      	sub	sp, #64	@ 0x40
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	2228      	movs	r2, #40	@ 0x28
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fca2 	bl	8004a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001106:	2301      	movs	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110a:	2310      	movs	r3, #16
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fe02 	bl	8002d20 <HAL_RCC_OscConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001122:	f000 f9ef 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001126:	230f      	movs	r3, #15
 8001128:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 f870 	bl	8003224 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800114a:	f000 f9db 	bl	8001504 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3740      	adds	r7, #64	@ 0x40
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <MX_I2C1_Init+0x54>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001164:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <MX_I2C1_Init+0x58>)
 8001166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001176:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800117a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001196:	f001 f927 	bl	80023e8 <HAL_I2C_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a0:	f000 f9b0 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000140 	.word	0x20000140
 80011ac:	40005400 	.word	0x40005400
 80011b0:	000186a0 	.word	0x000186a0

080011b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	463b      	mov	r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <MX_TIM2_Init+0x94>)
 80011d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <MX_TIM2_Init+0x94>)
 80011da:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80011de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_TIM2_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <MX_TIM2_Init+0x94>)
 80011e8:	2209      	movs	r2, #9
 80011ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_TIM2_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <MX_TIM2_Init+0x94>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f8:	4813      	ldr	r0, [pc, #76]	@ (8001248 <MX_TIM2_Init+0x94>)
 80011fa:	f002 f9a1 	bl	8003540 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001204:	f000 f97e 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_TIM2_Init+0x94>)
 8001216:	f002 fb25 	bl	8003864 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001220:	f000 f970 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_TIM2_Init+0x94>)
 8001232:	f002 fd07 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800123c:	f000 f962 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000194 	.word	0x20000194

0800124c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <MX_USART2_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001258:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001284:	f002 fd4e 	bl	8003d24 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f939 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001dc 	.word	0x200001dc
 800129c:	40004400 	.word	0x40004400

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <MX_GPIO_Init+0xb8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a27      	ldr	r2, [pc, #156]	@ (8001358 <MX_GPIO_Init+0xb8>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <MX_GPIO_Init+0xb8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <MX_GPIO_Init+0xb8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <MX_GPIO_Init+0xb8>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <MX_GPIO_Init+0xb8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2120      	movs	r1, #32
 80012e8:	481c      	ldr	r0, [pc, #112]	@ (800135c <MX_GPIO_Init+0xbc>)
 80012ea:	f001 f84c 	bl	8002386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 80012f4:	481a      	ldr	r0, [pc, #104]	@ (8001360 <MX_GPIO_Init+0xc0>)
 80012f6:	f001 f846 	bl	8002386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012fa:	2320      	movs	r3, #32
 80012fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4619      	mov	r1, r3
 8001310:	4812      	ldr	r0, [pc, #72]	@ (800135c <MX_GPIO_Init+0xbc>)
 8001312:	f000 fe9d 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001316:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 800131a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	480c      	ldr	r0, [pc, #48]	@ (8001360 <MX_GPIO_Init+0xc0>)
 8001330:	f000 fe8e 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001334:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133e:	2301      	movs	r3, #1
 8001340:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4619      	mov	r1, r3
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_GPIO_Init+0xbc>)
 800134a:	f000 fe81 	bl	8002050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00

08001364 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	//timer_run();
	SCH_Update();
 800136c:	f000 f8ea 	bl	8001544 <SCH_Update>
	getKeyInput();
 8001370:	f7fe ff32 	bl	80001d8 <getKeyInput>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  uint8_t i;
  if (huart->Instance == USART2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a4b      	ldr	r2, [pc, #300]	@ (80014b8 <HAL_UART_RxCpltCallback+0x13c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	f040 8090 	bne.w	80014b0 <HAL_UART_RxCpltCallback+0x134>
  {
    if (rx_idx == 0)
 8001390:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <HAL_UART_RxCpltCallback+0x140>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10c      	bne.n	80013b2 <HAL_UART_RxCpltCallback+0x36>
    {
      for (i = 0; i < 100; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e006      	b.n	80013ac <HAL_UART_RxCpltCallback+0x30>
      {
        rx_buffer[i] = 0;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	4a47      	ldr	r2, [pc, #284]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	54d1      	strb	r1, [r2, r3]
      for (i = 0; i < 100; i++)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b63      	cmp	r3, #99	@ 0x63
 80013b0:	d9f5      	bls.n	800139e <HAL_UART_RxCpltCallback+0x22>
      }
    } // RESET RX BUFFER

    if (rx_data[0] != 13)
 80013b2:	4b44      	ldr	r3, [pc, #272]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b0d      	cmp	r3, #13
 80013b8:	d00b      	beq.n	80013d2 <HAL_UART_RxCpltCallback+0x56>
    {
      rx_buffer[rx_idx++] = rx_data[0];
 80013ba:	4b40      	ldr	r3, [pc, #256]	@ (80014bc <HAL_UART_RxCpltCallback+0x140>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	b2d1      	uxtb	r1, r2
 80013c2:	4a3e      	ldr	r2, [pc, #248]	@ (80014bc <HAL_UART_RxCpltCallback+0x140>)
 80013c4:	7011      	strb	r1, [r2, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 80013ca:	7819      	ldrb	r1, [r3, #0]
 80013cc:	4b3c      	ldr	r3, [pc, #240]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 80013ce:	5499      	strb	r1, [r3, r2]
 80013d0:	e05f      	b.n	8001492 <HAL_UART_RxCpltCallback+0x116>
    }
    else
    {
      rx_idx = 0;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	@ (80014bc <HAL_UART_RxCpltCallback+0x140>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
      transfer_clpt = 1;
 80013d8:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_UART_RxCpltCallback+0x14c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 80013de:	2364      	movs	r3, #100	@ 0x64
 80013e0:	2202      	movs	r2, #2
 80013e2:	493a      	ldr	r1, [pc, #232]	@ (80014cc <HAL_UART_RxCpltCallback+0x150>)
 80013e4:	483a      	ldr	r0, [pc, #232]	@ (80014d0 <HAL_UART_RxCpltCallback+0x154>)
 80013e6:	f002 fced 	bl	8003dc4 <HAL_UART_Transmit>
      if (!strcmp(rx_buffer, "SHOW TIME"))
 80013ea:	493a      	ldr	r1, [pc, #232]	@ (80014d4 <HAL_UART_RxCpltCallback+0x158>)
 80013ec:	4834      	ldr	r0, [pc, #208]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 80013ee:	f7fe fead 	bl	800014c <strcmp>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <HAL_UART_RxCpltCallback+0x84>
      {
    	 uart_mode1 = 1;
 80013f8:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HAL_UART_RxCpltCallback+0x15c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e048      	b.n	8001492 <HAL_UART_RxCpltCallback+0x116>
      }
      else if (!strcmp(rx_buffer, "END"))
 8001400:	4936      	ldr	r1, [pc, #216]	@ (80014dc <HAL_UART_RxCpltCallback+0x160>)
 8001402:	482f      	ldr	r0, [pc, #188]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 8001404:	f7fe fea2 	bl	800014c <strcmp>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d103      	bne.n	8001416 <HAL_UART_RxCpltCallback+0x9a>
      {
         uart_mode1 = 0;
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <HAL_UART_RxCpltCallback+0x15c>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e03d      	b.n	8001492 <HAL_UART_RxCpltCallback+0x116>
      }
      else if (!strcmp(rx_buffer, "MANUAL"))
 8001416:	4932      	ldr	r1, [pc, #200]	@ (80014e0 <HAL_UART_RxCpltCallback+0x164>)
 8001418:	4829      	ldr	r0, [pc, #164]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 800141a:	f7fe fe97 	bl	800014c <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d110      	bne.n	8001446 <HAL_UART_RxCpltCallback+0xca>
      {
			ResetLight1();
 8001424:	f7ff fcc2 	bl	8000dac <ResetLight1>
			ResetLight2();
 8001428:	f7ff fcd0 	bl	8000dcc <ResetLight2>
			status1 = RED_GREEN_MAN;
 800142c:	4b2d      	ldr	r3, [pc, #180]	@ (80014e4 <HAL_UART_RxCpltCallback+0x168>)
 800142e:	2215      	movs	r2, #21
 8001430:	601a      	str	r2, [r3, #0]
			status2 = RED_GREEN_MAN;
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_UART_RxCpltCallback+0x16c>)
 8001434:	2215      	movs	r2, #21
 8001436:	601a      	str	r2, [r3, #0]
			count1 = 10*scale;
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <HAL_UART_RxCpltCallback+0x170>)
 800143a:	2264      	movs	r2, #100	@ 0x64
 800143c:	601a      	str	r2, [r3, #0]
			count2 = 1;
 800143e:	4b2c      	ldr	r3, [pc, #176]	@ (80014f0 <HAL_UART_RxCpltCallback+0x174>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e025      	b.n	8001492 <HAL_UART_RxCpltCallback+0x116>
      }
      else if (!strcmp(rx_buffer, "AUTO"))
 8001446:	492b      	ldr	r1, [pc, #172]	@ (80014f4 <HAL_UART_RxCpltCallback+0x178>)
 8001448:	481d      	ldr	r0, [pc, #116]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 800144a:	f7fe fe7f 	bl	800014c <strcmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d108      	bne.n	8001466 <HAL_UART_RxCpltCallback+0xea>
      {
    		status1 = INIT;
 8001454:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <HAL_UART_RxCpltCallback+0x168>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
    		status2 = INIT;
 800145a:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <HAL_UART_RxCpltCallback+0x16c>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
    		lcd_clear_display();
 8001460:	f7ff fde3 	bl	800102a <lcd_clear_display>
 8001464:	e015      	b.n	8001492 <HAL_UART_RxCpltCallback+0x116>
      }
      else if(status1/20==1 && !strcmp(rx_buffer, "1")){
 8001466:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <HAL_UART_RxCpltCallback+0x168>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3b14      	subs	r3, #20
 800146c:	2b13      	cmp	r3, #19
 800146e:	d80a      	bhi.n	8001486 <HAL_UART_RxCpltCallback+0x10a>
 8001470:	4921      	ldr	r1, [pc, #132]	@ (80014f8 <HAL_UART_RxCpltCallback+0x17c>)
 8001472:	4813      	ldr	r0, [pc, #76]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 8001474:	f7fe fe6a 	bl	800014c <strcmp>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <HAL_UART_RxCpltCallback+0x10a>
    	  uart_press=1;
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <HAL_UART_RxCpltCallback+0x180>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e005      	b.n	8001492 <HAL_UART_RxCpltCallback+0x116>
      }
      else
      {
        HAL_UART_Transmit(&huart2, "SYNTAX ERROR\n\r", 14, 100);
 8001486:	2364      	movs	r3, #100	@ 0x64
 8001488:	220e      	movs	r2, #14
 800148a:	491d      	ldr	r1, [pc, #116]	@ (8001500 <HAL_UART_RxCpltCallback+0x184>)
 800148c:	4810      	ldr	r0, [pc, #64]	@ (80014d0 <HAL_UART_RxCpltCallback+0x154>)
 800148e:	f002 fc99 	bl	8003dc4 <HAL_UART_Transmit>
      }
    }
    HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8001492:	2201      	movs	r2, #1
 8001494:	490b      	ldr	r1, [pc, #44]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_UART_RxCpltCallback+0x154>)
 8001498:	f002 fd1f 	bl	8003eda <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart2, rx_data, strlen(rx_data), 100);
 800149c:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 800149e:	f7fe fe5f 	bl	8000160 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	2364      	movs	r3, #100	@ 0x64
 80014a8:	4906      	ldr	r1, [pc, #24]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 80014aa:	4809      	ldr	r0, [pc, #36]	@ (80014d0 <HAL_UART_RxCpltCallback+0x154>)
 80014ac:	f002 fc8a 	bl	8003dc4 <HAL_UART_Transmit>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40004400 	.word	0x40004400
 80014bc:	20000224 	.word	0x20000224
 80014c0:	20000230 	.word	0x20000230
 80014c4:	20000228 	.word	0x20000228
 80014c8:	20000294 	.word	0x20000294
 80014cc:	08005450 	.word	0x08005450
 80014d0:	200001dc 	.word	0x200001dc
 80014d4:	08005454 	.word	0x08005454
 80014d8:	20000138 	.word	0x20000138
 80014dc:	08005460 	.word	0x08005460
 80014e0:	08005464 	.word	0x08005464
 80014e4:	20000128 	.word	0x20000128
 80014e8:	2000012c 	.word	0x2000012c
 80014ec:	20000130 	.word	0x20000130
 80014f0:	20000134 	.word	0x20000134
 80014f4:	0800546c 	.word	0x0800546c
 80014f8:	08005474 	.word	0x08005474
 80014fc:	2000013c 	.word	0x2000013c
 8001500:	08005478 	.word	0x08005478

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <Error_Handler+0x8>

08001510 <SCH_Init>:
uint8_t Error_code_G ;
uint8_t Error_port ;
uint8_t Last_error_code_G;
uint32_t Error_tick_count_G;

void SCH_Init(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i <SCH_MAX_TASKS; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	e006      	b.n	800152a <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f8e6 	bl	80016f0 <SCH_Delete_Task>
	for (i = 0; i <SCH_MAX_TASKS; i++) {
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	3301      	adds	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b27      	cmp	r3, #39	@ 0x27
 800152e:	d9f5      	bls.n	800151c <SCH_Init+0xc>
	}
	 // Reset the global error variable
	 // − SCH_Delete_Task() will generate an error code,
	 // (because the task array is empty)
	 Error_code_G= 0;
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <SCH_Init+0x30>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
	 //Timer_init();
	 //MX_IWDG_Init(); //Watchdog init
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200005b8 	.word	0x200005b8

08001544 <SCH_Update>:

void SCH_Update(void){
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
	uint32_t Index;
	  //NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	e05d      	b.n	800160c <SCH_Update+0xc8>
	  // Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask){
 8001550:	4933      	ldr	r1, [pc, #204]	@ (8001620 <SCH_Update+0xdc>)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d050      	beq.n	8001606 <SCH_Update+0xc2>
			if (SCH_tasks_G[Index].Delay == 0) {
 8001564:	492e      	ldr	r1, [pc, #184]	@ (8001620 <SCH_Update+0xdc>)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3304      	adds	r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d132      	bne.n	80015e0 <SCH_Update+0x9c>
				  // The task is due to run
				  // Inc. the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe+= 1;
 800157a:	4929      	ldr	r1, [pc, #164]	@ (8001620 <SCH_Update+0xdc>)
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	330c      	adds	r3, #12
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b2d8      	uxtb	r0, r3
 8001590:	4923      	ldr	r1, [pc, #140]	@ (8001620 <SCH_Update+0xdc>)
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	330c      	adds	r3, #12
 80015a0:	4602      	mov	r2, r0
 80015a2:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 80015a4:	491e      	ldr	r1, [pc, #120]	@ (8001620 <SCH_Update+0xdc>)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3308      	adds	r3, #8
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d025      	beq.n	8001606 <SCH_Update+0xc2>
					  // Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80015ba:	4919      	ldr	r1, [pc, #100]	@ (8001620 <SCH_Update+0xdc>)
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	3308      	adds	r3, #8
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	4814      	ldr	r0, [pc, #80]	@ (8001620 <SCH_Update+0xdc>)
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4403      	add	r3, r0
 80015da:	3304      	adds	r3, #4
 80015dc:	6019      	str	r1, [r3, #0]
 80015de:	e012      	b.n	8001606 <SCH_Update+0xc2>
				}
			} else {
				  // Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay --;
 80015e0:	490f      	ldr	r1, [pc, #60]	@ (8001620 <SCH_Update+0xdc>)
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3304      	adds	r3, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1e59      	subs	r1, r3, #1
 80015f4:	480a      	ldr	r0, [pc, #40]	@ (8001620 <SCH_Update+0xdc>)
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4403      	add	r3, r0
 8001602:	3304      	adds	r3, #4
 8001604:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3301      	adds	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b27      	cmp	r3, #39	@ 0x27
 8001610:	d99e      	bls.n	8001550 <SCH_Update+0xc>
			}
		}
	}
	//Watchdog_Refresh();
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000298 	.word	0x20000298

08001624 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	uint32_t Index = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
	// First find a gap in the array (if there is one)
 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001634:	e002      	b.n	800163c <SCH_Add_Task+0x18>
 	 {
	 	 Index++;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 800163c:	4929      	ldr	r1, [pc, #164]	@ (80016e4 <SCH_Add_Task+0xc0>)
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <SCH_Add_Task+0x32>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b27      	cmp	r3, #39	@ 0x27
 8001654:	d9ef      	bls.n	8001636 <SCH_Add_Task+0x12>
 	 }
 // Havewe reached the end of the list?
 if (Index ==SCH_MAX_TASKS){
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b28      	cmp	r3, #40	@ 0x28
 800165a:	d104      	bne.n	8001666 <SCH_Add_Task+0x42>
 // Task list is full
 // Set the global error variable
 Error_code_G=ERROR_SCH_TOO_MANY_TASKS;
 800165c:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <SCH_Add_Task+0xc4>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
  // Also return an error code
 return SCH_MAX_TASKS;
 8001662:	2328      	movs	r3, #40	@ 0x28
 8001664:	e039      	b.n	80016da <SCH_Add_Task+0xb6>
 }
 // If we’re here, there is a space in the task array
 SCH_tasks_G[Index].pTask = pFunction;
 8001666:	491f      	ldr	r1, [pc, #124]	@ (80016e4 <SCH_Add_Task+0xc0>)
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	601a      	str	r2, [r3, #0]
 SCH_tasks_G[Index].Delay = DELAY / TICK;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ec <SCH_Add_Task+0xc8>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	08d9      	lsrs	r1, r3, #3
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <SCH_Add_Task+0xc0>)
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4403      	add	r3, r0
 8001690:	3304      	adds	r3, #4
 8001692:	6019      	str	r1, [r3, #0]
 SCH_tasks_G[Index].Period = PERIOD / TICK;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a15      	ldr	r2, [pc, #84]	@ (80016ec <SCH_Add_Task+0xc8>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	08d9      	lsrs	r1, r3, #3
 800169e:	4811      	ldr	r0, [pc, #68]	@ (80016e4 <SCH_Add_Task+0xc0>)
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4403      	add	r3, r0
 80016ac:	3308      	adds	r3, #8
 80016ae:	6019      	str	r1, [r3, #0]
 SCH_tasks_G[Index].RunMe = 0;
 80016b0:	490c      	ldr	r1, [pc, #48]	@ (80016e4 <SCH_Add_Task+0xc0>)
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	330c      	adds	r3, #12
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
 SCH_tasks_G[Index].TaskID = Index;
 80016c4:	4907      	ldr	r1, [pc, #28]	@ (80016e4 <SCH_Add_Task+0xc0>)
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	3310      	adds	r3, #16
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	601a      	str	r2, [r3, #0]
 // return position of task (to allow later deletion)
 return Index;
 80016d8:	697b      	ldr	r3, [r7, #20]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000298 	.word	0x20000298
 80016e8:	200005b8 	.word	0x200005b8
 80016ec:	cccccccd 	.word	0xcccccccd

080016f0 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t TASK_INDEX){
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	uint8_t Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 80016f8:	491f      	ldr	r1, [pc, #124]	@ (8001778 <SCH_Delete_Task+0x88>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <SCH_Delete_Task+0x28>
	 // No task at this location ...
	 // Set the global error variable
	 Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <SCH_Delete_Task+0x8c>)
 800170e:	2208      	movs	r2, #8
 8001710:	701a      	strb	r2, [r3, #0]
	 // ... also return an error code
	 Return_code = RETURN_ERROR;
 8001712:	23ff      	movs	r3, #255	@ 0xff
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e001      	b.n	800171c <SCH_Delete_Task+0x2c>
	 } else {
	 Return_code = RETURN_NORMAL;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
	 }
	 SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 800171c:	4916      	ldr	r1, [pc, #88]	@ (8001778 <SCH_Delete_Task+0x88>)
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Delay = 0;
 800172e:	4912      	ldr	r1, [pc, #72]	@ (8001778 <SCH_Delete_Task+0x88>)
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3304      	adds	r3, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Period = 0;
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <SCH_Delete_Task+0x88>)
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3308      	adds	r3, #8
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001756:	4908      	ldr	r1, [pc, #32]	@ (8001778 <SCH_Delete_Task+0x88>)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	330c      	adds	r3, #12
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
	 return Return_code; // return status
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000298 	.word	0x20000298
 800177c:	200005b8 	.word	0x200005b8

08001780 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
	// Dispatches (runs) the next task (if one is ready)
	uint8_t Index;
	 // Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	e039      	b.n	8001800 <SCH_Dispatch_Task+0x80>
		if (SCH_tasks_G[Index].RunMe> 0) {
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	4921      	ldr	r1, [pc, #132]	@ (8001814 <SCH_Dispatch_Task+0x94>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	330c      	adds	r3, #12
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d02b      	beq.n	80017fa <SCH_Dispatch_Task+0x7a>
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	491b      	ldr	r1, [pc, #108]	@ (8001814 <SCH_Dispatch_Task+0x94>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--; // Reset / reduceRunMe flag
 80017b4:	79fa      	ldrb	r2, [r7, #7]
 80017b6:	4917      	ldr	r1, [pc, #92]	@ (8001814 <SCH_Dispatch_Task+0x94>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	330c      	adds	r3, #12
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2d8      	uxtb	r0, r3
 80017ca:	4912      	ldr	r1, [pc, #72]	@ (8001814 <SCH_Dispatch_Task+0x94>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	330c      	adds	r3, #12
 80017d8:	4602      	mov	r2, r0
 80017da:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// − if this is a ’one shot’ task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0){
 80017dc:	79fa      	ldrb	r2, [r7, #7]
 80017de:	490d      	ldr	r1, [pc, #52]	@ (8001814 <SCH_Dispatch_Task+0x94>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3308      	adds	r3, #8
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d103      	bne.n	80017fa <SCH_Dispatch_Task+0x7a>
				SCH_Delete_Task(Index);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff7b 	bl	80016f0 <SCH_Delete_Task>
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	3301      	adds	r3, #1
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b27      	cmp	r3, #39	@ 0x27
 8001804:	d9c2      	bls.n	800178c <SCH_Dispatch_Task+0xc>
			}
		}
	}
	// Report system status
	SCH_Report_Status();
 8001806:	f000 f807 	bl	8001818 <SCH_Report_Status>
	// The scheduler enters idlemode at this point
	//SCH_Go_To_Sleep();
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000298 	.word	0x20000298

08001818 <SCH_Report_Status>:

void SCH_Go_To_Sleep(){}

void SCH_Report_Status(void) {
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
#ifdef SCH_REPORT_ERRORS
	//ONLYAPPLIES IFWEAREREPORTINGERRORS
	// Check for answer error code
	if (Error_code_G != Last_error_code_G) {
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <SCH_Report_Status+0x68>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <SCH_Report_Status+0x6c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d016      	beq.n	8001856 <SCH_Report_Status+0x3e>
		// Negative logic onLEDs assumed
		Error_port = 255 - Error_code_G;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <SCH_Report_Status+0x68>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	43db      	mvns	r3, r3
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <SCH_Report_Status+0x70>)
 8001832:	701a      	strb	r2, [r3, #0]
		Last_error_code_G = Error_code_G;
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <SCH_Report_Status+0x68>)
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <SCH_Report_Status+0x6c>)
 800183a:	701a      	strb	r2, [r3, #0]
		if (Error_code_G != 0){
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <SCH_Report_Status+0x68>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <SCH_Report_Status+0x36>
			Error_tick_count_G= 60000;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <SCH_Report_Status+0x74>)
 8001846:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800184a:	601a      	str	r2, [r3, #0]
				Error_code_G= 0; // Reset error code
			}
		}
	}
#endif
}
 800184c:	e013      	b.n	8001876 <SCH_Report_Status+0x5e>
			Error_tick_count_G= 0;
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <SCH_Report_Status+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	e00f      	b.n	8001876 <SCH_Report_Status+0x5e>
		if (Error_tick_count_G != 0){
 8001856:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <SCH_Report_Status+0x74>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <SCH_Report_Status+0x5e>
			if (--Error_tick_count_G== 0) {
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <SCH_Report_Status+0x74>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3b01      	subs	r3, #1
 8001864:	4a09      	ldr	r2, [pc, #36]	@ (800188c <SCH_Report_Status+0x74>)
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <SCH_Report_Status+0x74>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <SCH_Report_Status+0x5e>
				Error_code_G= 0; // Reset error code
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <SCH_Report_Status+0x68>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	200005b8 	.word	0x200005b8
 8001884:	200005ba 	.word	0x200005ba
 8001888:	200005b9 	.word	0x200005b9
 800188c:	200005bc 	.word	0x200005bc

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_MspInit+0x5c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <HAL_MspInit+0x5c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_MspInit+0x5c>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <HAL_MspInit+0x5c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	@ (80018ec <HAL_MspInit+0x5c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <HAL_MspInit+0x5c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_MspInit+0x60>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_MspInit+0x60>)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1d      	ldr	r2, [pc, #116]	@ (8001984 <HAL_I2C_MspInit+0x90>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d132      	bne.n	800197a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <HAL_I2C_MspInit+0x94>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a1b      	ldr	r2, [pc, #108]	@ (8001988 <HAL_I2C_MspInit+0x94>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_I2C_MspInit+0x94>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800192c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001932:	2312      	movs	r3, #18
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4812      	ldr	r0, [pc, #72]	@ (800198c <HAL_I2C_MspInit+0x98>)
 8001942:	f000 fb85 	bl	8002050 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_I2C_MspInit+0x9c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
 800195c:	4a0c      	ldr	r2, [pc, #48]	@ (8001990 <HAL_I2C_MspInit+0x9c>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_I2C_MspInit+0x94>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a08      	ldr	r2, [pc, #32]	@ (8001988 <HAL_I2C_MspInit+0x94>)
 8001968:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_I2C_MspInit+0x94>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40005400 	.word	0x40005400
 8001988:	40021000 	.word	0x40021000
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40010000 	.word	0x40010000

08001994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019a4:	d113      	bne.n	80019ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <HAL_TIM_Base_MspInit+0x44>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <HAL_TIM_Base_MspInit+0x44>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_TIM_Base_MspInit+0x44>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	201c      	movs	r0, #28
 80019c4:	f000 fa5b 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c8:	201c      	movs	r0, #28
 80019ca:	f000 fa74 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a74 <HAL_UART_MspInit+0x98>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d137      	bne.n	8001a6c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <HAL_UART_MspInit+0x9c>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a06:	61d3      	str	r3, [r2, #28]
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a17      	ldr	r2, [pc, #92]	@ (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_UART_MspInit+0x9c>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480f      	ldr	r0, [pc, #60]	@ (8001a7c <HAL_UART_MspInit+0xa0>)
 8001a40:	f000 fb06 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a44:	2308      	movs	r3, #8
 8001a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4619      	mov	r1, r3
 8001a56:	4809      	ldr	r0, [pc, #36]	@ (8001a7c <HAL_UART_MspInit+0xa0>)
 8001a58:	f000 fafa 	bl	8002050 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2026      	movs	r0, #38	@ 0x26
 8001a62:	f000 fa0c 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a66:	2026      	movs	r0, #38	@ 0x26
 8001a68:	f000 fa25 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40004400 	.word	0x40004400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010800 	.word	0x40010800

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <NMI_Handler+0x4>

08001a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <MemManage_Handler+0x4>

08001a98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f8be 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <TIM2_IRQHandler+0x10>)
 8001ade:	f001 fdd1 	bl	8003684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000194 	.word	0x20000194

08001aec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <USART2_IRQHandler+0x10>)
 8001af2:	f002 fa17 	bl	8003f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200001dc 	.word	0x200001dc

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f002 ff9a 	bl	8004a68 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20005000 	.word	0x20005000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	200005c0 	.word	0x200005c0
 8001b68:	20000710 	.word	0x20000710

08001b6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b78:	f7ff fff8 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480b      	ldr	r0, [pc, #44]	@ (8001bac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b7e:	490c      	ldr	r1, [pc, #48]	@ (8001bb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b80:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b94:	4c09      	ldr	r4, [pc, #36]	@ (8001bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f002 ff67 	bl	8004a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba6:	f7ff fa69 	bl	800107c <main>
  bx lr
 8001baa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001bb4:	080054f8 	.word	0x080054f8
  ldr r2, =_sbss
 8001bb8:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001bbc:	20000710 	.word	0x20000710

08001bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC1_2_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <HAL_Init+0x28>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_Init+0x28>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f947 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fe56 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f95f 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 f927 	bl	8001e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	@ (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000007c 	.word	0x2000007c
 8001c48:	20000084 	.word	0x20000084
 8001c4c:	20000080 	.word	0x20000080

08001c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_IncTick+0x1c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a03      	ldr	r2, [pc, #12]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	20000084 	.word	0x20000084
 8001c70:	200005c4 	.word	0x200005c4

08001c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b02      	ldr	r3, [pc, #8]	@ (8001c84 <HAL_GetTick+0x10>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	200005c4 	.word	0x200005c4

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffe0 	bl	8001c74 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000084 	.word	0x20000084

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4906      	ldr	r1, [pc, #24]	@ (8001d68 <__NVIC_EnableIRQ+0x34>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	@ (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	@ (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	@ 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	@ 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e34:	d301      	bcc.n	8001e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00f      	b.n	8001e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <SysTick_Config+0x40>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e42:	210f      	movs	r1, #15
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f7ff ff90 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <SysTick_Config+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <SysTick_Config+0x40>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff2d 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff42 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff90 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5f 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff35 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa2 	bl	8001e24 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d008      	beq.n	8001f14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2204      	movs	r2, #4
 8001f06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e020      	b.n	8001f56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 020e 	bic.w	r2, r2, #14
 8001f22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d005      	beq.n	8001f84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e051      	b.n	8002028 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 020e 	bic.w	r2, r2, #14
 8001f92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a22      	ldr	r2, [pc, #136]	@ (8002034 <HAL_DMA_Abort_IT+0xd4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d029      	beq.n	8002002 <HAL_DMA_Abort_IT+0xa2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a21      	ldr	r2, [pc, #132]	@ (8002038 <HAL_DMA_Abort_IT+0xd8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d022      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x9e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800203c <HAL_DMA_Abort_IT+0xdc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01a      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0x98>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <HAL_DMA_Abort_IT+0xe0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d012      	beq.n	8001ff2 <HAL_DMA_Abort_IT+0x92>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002044 <HAL_DMA_Abort_IT+0xe4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00a      	beq.n	8001fec <HAL_DMA_Abort_IT+0x8c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1b      	ldr	r2, [pc, #108]	@ (8002048 <HAL_DMA_Abort_IT+0xe8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d102      	bne.n	8001fe6 <HAL_DMA_Abort_IT+0x86>
 8001fe0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fe4:	e00e      	b.n	8002004 <HAL_DMA_Abort_IT+0xa4>
 8001fe6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fea:	e00b      	b.n	8002004 <HAL_DMA_Abort_IT+0xa4>
 8001fec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ff0:	e008      	b.n	8002004 <HAL_DMA_Abort_IT+0xa4>
 8001ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff6:	e005      	b.n	8002004 <HAL_DMA_Abort_IT+0xa4>
 8001ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ffc:	e002      	b.n	8002004 <HAL_DMA_Abort_IT+0xa4>
 8001ffe:	2310      	movs	r3, #16
 8002000:	e000      	b.n	8002004 <HAL_DMA_Abort_IT+0xa4>
 8002002:	2301      	movs	r3, #1
 8002004:	4a11      	ldr	r2, [pc, #68]	@ (800204c <HAL_DMA_Abort_IT+0xec>)
 8002006:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
    } 
  }
  return status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40020008 	.word	0x40020008
 8002038:	4002001c 	.word	0x4002001c
 800203c:	40020030 	.word	0x40020030
 8002040:	40020044 	.word	0x40020044
 8002044:	40020058 	.word	0x40020058
 8002048:	4002006c 	.word	0x4002006c
 800204c:	40020000 	.word	0x40020000

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b08b      	sub	sp, #44	@ 0x2c
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002062:	e169      	b.n	8002338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002064:	2201      	movs	r2, #1
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	429a      	cmp	r2, r3
 800207e:	f040 8158 	bne.w	8002332 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a9a      	ldr	r2, [pc, #616]	@ (80022f0 <HAL_GPIO_Init+0x2a0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d05e      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 800208c:	4a98      	ldr	r2, [pc, #608]	@ (80022f0 <HAL_GPIO_Init+0x2a0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d875      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 8002092:	4a98      	ldr	r2, [pc, #608]	@ (80022f4 <HAL_GPIO_Init+0x2a4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d058      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 8002098:	4a96      	ldr	r2, [pc, #600]	@ (80022f4 <HAL_GPIO_Init+0x2a4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d86f      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 800209e:	4a96      	ldr	r2, [pc, #600]	@ (80022f8 <HAL_GPIO_Init+0x2a8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d052      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020a4:	4a94      	ldr	r2, [pc, #592]	@ (80022f8 <HAL_GPIO_Init+0x2a8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d869      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020aa:	4a94      	ldr	r2, [pc, #592]	@ (80022fc <HAL_GPIO_Init+0x2ac>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04c      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020b0:	4a92      	ldr	r2, [pc, #584]	@ (80022fc <HAL_GPIO_Init+0x2ac>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d863      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020b6:	4a92      	ldr	r2, [pc, #584]	@ (8002300 <HAL_GPIO_Init+0x2b0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d046      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020bc:	4a90      	ldr	r2, [pc, #576]	@ (8002300 <HAL_GPIO_Init+0x2b0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d85d      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d82a      	bhi.n	800211c <HAL_GPIO_Init+0xcc>
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d859      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020ca:	a201      	add	r2, pc, #4	@ (adr r2, 80020d0 <HAL_GPIO_Init+0x80>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	08002125 	.word	0x08002125
 80020d8:	08002137 	.word	0x08002137
 80020dc:	08002179 	.word	0x08002179
 80020e0:	0800217f 	.word	0x0800217f
 80020e4:	0800217f 	.word	0x0800217f
 80020e8:	0800217f 	.word	0x0800217f
 80020ec:	0800217f 	.word	0x0800217f
 80020f0:	0800217f 	.word	0x0800217f
 80020f4:	0800217f 	.word	0x0800217f
 80020f8:	0800217f 	.word	0x0800217f
 80020fc:	0800217f 	.word	0x0800217f
 8002100:	0800217f 	.word	0x0800217f
 8002104:	0800217f 	.word	0x0800217f
 8002108:	0800217f 	.word	0x0800217f
 800210c:	0800217f 	.word	0x0800217f
 8002110:	0800217f 	.word	0x0800217f
 8002114:	0800212d 	.word	0x0800212d
 8002118:	08002141 	.word	0x08002141
 800211c:	4a79      	ldr	r2, [pc, #484]	@ (8002304 <HAL_GPIO_Init+0x2b4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002122:	e02c      	b.n	800217e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e029      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	3304      	adds	r3, #4
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e024      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	3308      	adds	r3, #8
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e01f      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	330c      	adds	r3, #12
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e01a      	b.n	8002180 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002152:	2304      	movs	r3, #4
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e013      	b.n	8002180 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	611a      	str	r2, [r3, #16]
          break;
 800216a:	e009      	b.n	8002180 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800216c:	2308      	movs	r3, #8
 800216e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	615a      	str	r2, [r3, #20]
          break;
 8002176:	e003      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x130>
          break;
 800217e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2bff      	cmp	r3, #255	@ 0xff
 8002184:	d801      	bhi.n	800218a <HAL_GPIO_Init+0x13a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	e001      	b.n	800218e <HAL_GPIO_Init+0x13e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2bff      	cmp	r3, #255	@ 0xff
 8002194:	d802      	bhi.n	800219c <HAL_GPIO_Init+0x14c>
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x152>
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	3b08      	subs	r3, #8
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	210f      	movs	r1, #15
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80b1 	beq.w	8002332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002308 <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002308 <HAL_GPIO_Init+0x2b8>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002308 <HAL_GPIO_Init+0x2b8>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e8:	4a48      	ldr	r2, [pc, #288]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a40      	ldr	r2, [pc, #256]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <HAL_GPIO_Init+0x1ec>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3f      	ldr	r2, [pc, #252]	@ (8002314 <HAL_GPIO_Init+0x2c4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00d      	beq.n	8002238 <HAL_GPIO_Init+0x1e8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3e      	ldr	r2, [pc, #248]	@ (8002318 <HAL_GPIO_Init+0x2c8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3d      	ldr	r2, [pc, #244]	@ (800231c <HAL_GPIO_Init+0x2cc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_GPIO_Init+0x1e0>
 800222c:	2303      	movs	r3, #3
 800222e:	e006      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002230:	2304      	movs	r3, #4
 8002232:	e004      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002234:	2302      	movs	r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 800223c:	2300      	movs	r3, #0
 800223e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002240:	f002 0203 	and.w	r2, r2, #3
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	4093      	lsls	r3, r2
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800224e:	492f      	ldr	r1, [pc, #188]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002268:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	492c      	ldr	r1, [pc, #176]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002276:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	43db      	mvns	r3, r3
 800227e:	4928      	ldr	r1, [pc, #160]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002280:	4013      	ands	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002290:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	4922      	ldr	r1, [pc, #136]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800229e:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	491e      	ldr	r1, [pc, #120]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022b8:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4918      	ldr	r1, [pc, #96]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4914      	ldr	r1, [pc, #80]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d021      	beq.n	8002324 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	490e      	ldr	r1, [pc, #56]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e021      	b.n	8002332 <HAL_GPIO_Init+0x2e2>
 80022ee:	bf00      	nop
 80022f0:	10320000 	.word	0x10320000
 80022f4:	10310000 	.word	0x10310000
 80022f8:	10220000 	.word	0x10220000
 80022fc:	10210000 	.word	0x10210000
 8002300:	10120000 	.word	0x10120000
 8002304:	10110000 	.word	0x10110000
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000
 8002310:	40010800 	.word	0x40010800
 8002314:	40010c00 	.word	0x40010c00
 8002318:	40011000 	.word	0x40011000
 800231c:	40011400 	.word	0x40011400
 8002320:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_GPIO_Init+0x304>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	43db      	mvns	r3, r3
 800232c:	4909      	ldr	r1, [pc, #36]	@ (8002354 <HAL_GPIO_Init+0x304>)
 800232e:	4013      	ands	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	3301      	adds	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	f47f ae8e 	bne.w	8002064 <HAL_GPIO_Init+0x14>
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	372c      	adds	r7, #44	@ 0x2c
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e001      	b.n	800237a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	807b      	strh	r3, [r7, #2]
 8002392:	4613      	mov	r3, r2
 8002394:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002396:	787b      	ldrb	r3, [r7, #1]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023a2:	e003      	b.n	80023ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	611a      	str	r2, [r3, #16]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	041a      	lsls	r2, r3, #16
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	400b      	ands	r3, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e12b      	b.n	8002652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fa70 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	@ 0x24
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800243a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800244a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800244c:	f001 f832 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4a81      	ldr	r2, [pc, #516]	@ (800265c <HAL_I2C_Init+0x274>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d807      	bhi.n	800246c <HAL_I2C_Init+0x84>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a80      	ldr	r2, [pc, #512]	@ (8002660 <HAL_I2C_Init+0x278>)
 8002460:	4293      	cmp	r3, r2
 8002462:	bf94      	ite	ls
 8002464:	2301      	movls	r3, #1
 8002466:	2300      	movhi	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e006      	b.n	800247a <HAL_I2C_Init+0x92>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a7d      	ldr	r2, [pc, #500]	@ (8002664 <HAL_I2C_Init+0x27c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	bf94      	ite	ls
 8002474:	2301      	movls	r3, #1
 8002476:	2300      	movhi	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0e7      	b.n	8002652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a78      	ldr	r2, [pc, #480]	@ (8002668 <HAL_I2C_Init+0x280>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0c9b      	lsrs	r3, r3, #18
 800248c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	@ (800265c <HAL_I2C_Init+0x274>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d802      	bhi.n	80024bc <HAL_I2C_Init+0xd4>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3301      	adds	r3, #1
 80024ba:	e009      	b.n	80024d0 <HAL_I2C_Init+0xe8>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	4a69      	ldr	r2, [pc, #420]	@ (800266c <HAL_I2C_Init+0x284>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	3301      	adds	r3, #1
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	495c      	ldr	r1, [pc, #368]	@ (800265c <HAL_I2C_Init+0x274>)
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d819      	bhi.n	8002524 <HAL_I2C_Init+0x13c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e59      	subs	r1, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fe:	1c59      	adds	r1, r3, #1
 8002500:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002504:	400b      	ands	r3, r1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_I2C_Init+0x138>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e59      	subs	r1, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fbb1 f3f3 	udiv	r3, r1, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251e:	e051      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002520:	2304      	movs	r3, #4
 8002522:	e04f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <HAL_I2C_Init+0x168>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	fbb0 f3f3 	udiv	r3, r0, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e012      	b.n	8002576 <HAL_I2C_Init+0x18e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Init+0x196>
 800257a:	2301      	movs	r3, #1
 800257c:	e022      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10e      	bne.n	80025a4 <HAL_I2C_Init+0x1bc>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e58      	subs	r0, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	440b      	add	r3, r1
 8002594:	fbb0 f3f3 	udiv	r3, r0, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025a2:	e00f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	6809      	ldr	r1, [r1, #0]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6911      	ldr	r1, [r2, #16]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	000186a0 	.word	0x000186a0
 8002660:	001e847f 	.word	0x001e847f
 8002664:	003d08ff 	.word	0x003d08ff
 8002668:	431bde83 	.word	0x431bde83
 800266c:	10624dd3 	.word	0x10624dd3

08002670 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	461a      	mov	r2, r3
 800267c:	460b      	mov	r3, r1
 800267e:	817b      	strh	r3, [r7, #10]
 8002680:	4613      	mov	r3, r2
 8002682:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff faf6 	bl	8001c74 <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	f040 80e0 	bne.w	8002858 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2319      	movs	r3, #25
 800269e:	2201      	movs	r2, #1
 80026a0:	4970      	ldr	r1, [pc, #448]	@ (8002864 <HAL_I2C_Master_Transmit+0x1f4>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f964 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0d3      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_I2C_Master_Transmit+0x50>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0cc      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d007      	beq.n	80026e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2221      	movs	r2, #33	@ 0x21
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2210      	movs	r2, #16
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	893a      	ldrh	r2, [r7, #8]
 8002716:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a50      	ldr	r2, [pc, #320]	@ (8002868 <HAL_I2C_Master_Transmit+0x1f8>)
 8002726:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002728:	8979      	ldrh	r1, [r7, #10]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	6a3a      	ldr	r2, [r7, #32]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f89c 	bl	800286c <I2C_MasterRequestWrite>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e08d      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002754:	e066      	b.n	8002824 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fa22 	bl	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	2b04      	cmp	r3, #4
 800276c:	d107      	bne.n	800277e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e06b      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d11b      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0x188>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d017      	beq.n	80027f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	6a39      	ldr	r1, [r7, #32]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fa19 	bl	8002c34 <I2C_WaitOnBTFFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	2b04      	cmp	r3, #4
 800280e:	d107      	bne.n	8002820 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e01a      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d194      	bne.n	8002756 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	00100002 	.word	0x00100002
 8002868:	ffff0000 	.word	0xffff0000

0800286c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	460b      	mov	r3, r1
 800287a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d006      	beq.n	8002896 <I2C_MasterRequestWrite+0x2a>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d003      	beq.n	8002896 <I2C_MasterRequestWrite+0x2a>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002894:	d108      	bne.n	80028a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e00b      	b.n	80028c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	2b12      	cmp	r3, #18
 80028ae:	d107      	bne.n	80028c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f84f 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e6:	d103      	bne.n	80028f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e035      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028fc:	d108      	bne.n	8002910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	e01b      	b.n	8002948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002910:	897b      	ldrh	r3, [r7, #10]
 8002912:	11db      	asrs	r3, r3, #7
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 0306 	and.w	r3, r3, #6
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f063 030f 	orn	r3, r3, #15
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	490e      	ldr	r1, [pc, #56]	@ (8002968 <I2C_MasterRequestWrite+0xfc>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f898 	bl	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e010      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4907      	ldr	r1, [pc, #28]	@ (800296c <I2C_MasterRequestWrite+0x100>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f888 	bl	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00010008 	.word	0x00010008
 800296c:	00010002 	.word	0x00010002

08002970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002980:	e048      	b.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d044      	beq.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7ff f973 	bl	8001c74 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d139      	bne.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	0c1b      	lsrs	r3, r3, #16
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d10d      	bne.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4013      	ands	r3, r2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	e00c      	b.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d116      	bne.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e023      	b.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10d      	bne.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	e00c      	b.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d093      	beq.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a72:	e071      	b.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a82:	d123      	bne.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	f043 0204 	orr.w	r2, r3, #4
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e067      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad2:	d041      	beq.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad4:	f7ff f8ce 	bl	8001c74 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d302      	bcc.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d136      	bne.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10c      	bne.n	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e00b      	b.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	43da      	mvns	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e021      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10c      	bne.n	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e00b      	b.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f47f af6d 	bne.w	8002a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb0:	e034      	b.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f886 	bl	8002cc4 <I2C_IsAcknowledgeFailed>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e034      	b.n	8002c2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d028      	beq.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7ff f853 	bl	8001c74 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d11d      	bne.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bea:	2b80      	cmp	r3, #128	@ 0x80
 8002bec:	d016      	beq.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e007      	b.n	8002c2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c26:	2b80      	cmp	r3, #128	@ 0x80
 8002c28:	d1c3      	bne.n	8002bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c40:	e034      	b.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f83e 	bl	8002cc4 <I2C_IsAcknowledgeFailed>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e034      	b.n	8002cbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d028      	beq.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7ff f80b 	bl	8001c74 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11d      	bne.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d016      	beq.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d1c3      	bne.n	8002c42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cda:	d11b      	bne.n	8002d14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ce4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e272      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8087 	beq.w	8002e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d40:	4b92      	ldr	r3, [pc, #584]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d112      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e>
 8002d58:	4b8c      	ldr	r3, [pc, #560]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d64:	d10b      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d66:	4b89      	ldr	r3, [pc, #548]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d06c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x12c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d168      	bne.n	8002e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e24c      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x76>
 8002d88:	4b80      	ldr	r3, [pc, #512]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a7f      	ldr	r2, [pc, #508]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e02e      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x98>
 8002d9e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7a      	ldr	r2, [pc, #488]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b78      	ldr	r3, [pc, #480]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a77      	ldr	r2, [pc, #476]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002db0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0xbc>
 8002dc2:	4b72      	ldr	r3, [pc, #456]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a71      	ldr	r2, [pc, #452]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6f      	ldr	r3, [pc, #444]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002ddc:	4b6b      	ldr	r3, [pc, #428]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6a      	ldr	r2, [pc, #424]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b68      	ldr	r3, [pc, #416]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a67      	ldr	r2, [pc, #412]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe ff3a 	bl	8001c74 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe ff36 	bl	8001c74 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	@ 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e200      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b5d      	ldr	r3, [pc, #372]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe4>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe ff26 	bl	8001c74 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe ff22 	bl	8001c74 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	@ 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1ec      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b53      	ldr	r3, [pc, #332]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x10c>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e66:	4b49      	ldr	r3, [pc, #292]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x18c>
 8002e72:	4b46      	ldr	r3, [pc, #280]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b43      	ldr	r3, [pc, #268]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x176>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1c0      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b3d      	ldr	r3, [pc, #244]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4939      	ldr	r1, [pc, #228]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e03a      	b.n	8002f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b36      	ldr	r3, [pc, #216]	@ (8002f90 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe fedb 	bl	8001c74 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fed7 	bl	8001c74 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1a1      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4927      	ldr	r1, [pc, #156]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe feba 	bl	8001c74 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f04:	f7fe feb6 	bl	8001c74 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e180      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03a      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d019      	beq.n	8002f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f36:	4b17      	ldr	r3, [pc, #92]	@ (8002f94 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fe9a 	bl	8001c74 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe fe96 	bl	8001c74 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e160      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 face 	bl	8003504 <RCC_Delay>
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fe fe80 	bl	8001c74 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f76:	e00f      	b.n	8002f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fe7c 	bl	8001c74 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d908      	bls.n	8002f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e146      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	42420000 	.word	0x42420000
 8002f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	4b92      	ldr	r3, [pc, #584]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e9      	bne.n	8002f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a6 	beq.w	80030fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b88      	ldr	r3, [pc, #544]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4a87      	ldr	r2, [pc, #540]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fcc:	61d3      	str	r3, [r2, #28]
 8002fce:	4b85      	ldr	r3, [pc, #532]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	4b82      	ldr	r3, [pc, #520]	@ (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d118      	bne.n	800301c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fea:	4b7f      	ldr	r3, [pc, #508]	@ (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7e      	ldr	r2, [pc, #504]	@ (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fe3d 	bl	8001c74 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffe:	f7fe fe39 	bl	8001c74 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	@ 0x64
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e103      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	4b75      	ldr	r3, [pc, #468]	@ (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x312>
 8003024:	4b6f      	ldr	r3, [pc, #444]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a6e      	ldr	r2, [pc, #440]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	e02d      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x334>
 800303a:	4b6a      	ldr	r3, [pc, #424]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a69      	ldr	r2, [pc, #420]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	4b67      	ldr	r3, [pc, #412]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4a66      	ldr	r2, [pc, #408]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	6213      	str	r3, [r2, #32]
 8003052:	e01c      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0x356>
 800305c:	4b61      	ldr	r3, [pc, #388]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a60      	ldr	r2, [pc, #384]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	4b5e      	ldr	r3, [pc, #376]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a5d      	ldr	r2, [pc, #372]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	e00b      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003076:	4b5b      	ldr	r3, [pc, #364]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a5a      	ldr	r2, [pc, #360]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6213      	str	r3, [r2, #32]
 8003082:	4b58      	ldr	r3, [pc, #352]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4a57      	ldr	r2, [pc, #348]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d015      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe fded 	bl	8001c74 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe fde9 	bl	8001c74 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0b1      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	4b4b      	ldr	r3, [pc, #300]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ee      	beq.n	800309e <HAL_RCC_OscConfig+0x37e>
 80030c0:	e014      	b.n	80030ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fdd7 	bl	8001c74 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe fdd3 	bl	8001c74 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e09b      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	4b40      	ldr	r3, [pc, #256]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b3c      	ldr	r3, [pc, #240]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a3b      	ldr	r2, [pc, #236]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8087 	beq.w	8003216 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003108:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d061      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d146      	bne.n	80031aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	4b33      	ldr	r3, [pc, #204]	@ (80031ec <HAL_RCC_OscConfig+0x4cc>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fe fda7 	bl	8001c74 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7fe fda3 	bl	8001c74 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e06d      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313c:	4b29      	ldr	r3, [pc, #164]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003150:	d108      	bne.n	8003164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003152:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4921      	ldr	r1, [pc, #132]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003164:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a19      	ldr	r1, [r3, #32]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	430b      	orrs	r3, r1
 8003176:	491b      	ldr	r1, [pc, #108]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ec <HAL_RCC_OscConfig+0x4cc>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe fd77 	bl	8001c74 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fe fd73 	bl	8001c74 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e03d      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319c:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x46a>
 80031a8:	e035      	b.n	8003216 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <HAL_RCC_OscConfig+0x4cc>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fd60 	bl	8001c74 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fd5c 	bl	8001c74 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e026      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x498>
 80031d6:	e01e      	b.n	8003216 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e019      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
 80031ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <HAL_RCC_OscConfig+0x500>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0d0      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b6a      	ldr	r3, [pc, #424]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d910      	bls.n	8003268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b67      	ldr	r3, [pc, #412]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	4965      	ldr	r1, [pc, #404]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b63      	ldr	r3, [pc, #396]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0b8      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003280:	4b59      	ldr	r3, [pc, #356]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a58      	ldr	r2, [pc, #352]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800328a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003298:	4b53      	ldr	r3, [pc, #332]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a52      	ldr	r2, [pc, #328]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80032a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b50      	ldr	r3, [pc, #320]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	494d      	ldr	r1, [pc, #308]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d040      	beq.n	8003344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d115      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07f      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b41      	ldr	r3, [pc, #260]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e073      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	4b3d      	ldr	r3, [pc, #244]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06b      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b39      	ldr	r3, [pc, #228]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4936      	ldr	r1, [pc, #216]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fe fcae 	bl	8001c74 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fe fcaa 	bl	8001c74 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e053      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2d      	ldr	r3, [pc, #180]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b27      	ldr	r3, [pc, #156]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d210      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b24      	ldr	r3, [pc, #144]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4922      	ldr	r1, [pc, #136]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b20      	ldr	r3, [pc, #128]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e032      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b19      	ldr	r3, [pc, #100]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4916      	ldr	r1, [pc, #88]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800339e:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	490e      	ldr	r1, [pc, #56]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033b2:	f000 f821 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490a      	ldr	r1, [pc, #40]	@ (80033ec <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a09      	ldr	r2, [pc, #36]	@ (80033f0 <HAL_RCC_ClockConfig+0x1cc>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ce:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <HAL_RCC_ClockConfig+0x1d0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fc0c 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08005488 	.word	0x08005488
 80033f0:	2000007c 	.word	0x2000007c
 80033f4:	20000080 	.word	0x20000080

080033f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003412:	4b1e      	ldr	r3, [pc, #120]	@ (800348c <HAL_RCC_GetSysClockFreq+0x94>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d002      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x30>
 8003422:	2b08      	cmp	r3, #8
 8003424:	d003      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x36>
 8003426:	e027      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003428:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x98>)
 800342a:	613b      	str	r3, [r7, #16]
      break;
 800342c:	e027      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	0c9b      	lsrs	r3, r3, #18
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	4a17      	ldr	r2, [pc, #92]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003438:	5cd3      	ldrb	r3, [r2, r3]
 800343a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d010      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003446:	4b11      	ldr	r3, [pc, #68]	@ (800348c <HAL_RCC_GetSysClockFreq+0x94>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	0c5b      	lsrs	r3, r3, #17
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	4a11      	ldr	r2, [pc, #68]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x98>)
 800345a:	fb03 f202 	mul.w	r2, r3, r2
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	e004      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0c      	ldr	r2, [pc, #48]	@ (800349c <HAL_RCC_GetSysClockFreq+0xa4>)
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	613b      	str	r3, [r7, #16]
      break;
 8003476:	e002      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x98>)
 800347a:	613b      	str	r3, [r7, #16]
      break;
 800347c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347e:	693b      	ldr	r3, [r7, #16]
}
 8003480:	4618      	mov	r0, r3
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	007a1200 	.word	0x007a1200
 8003494:	080054a0 	.word	0x080054a0
 8003498:	080054b0 	.word	0x080054b0
 800349c:	003d0900 	.word	0x003d0900

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a4:	4b02      	ldr	r3, [pc, #8]	@ (80034b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	2000007c 	.word	0x2000007c

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b8:	f7ff fff2 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08005498 	.word	0x08005498

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e0:	f7ff ffde 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	0adb      	lsrs	r3, r3, #11
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	@ (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	08005498 	.word	0x08005498

08003504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <RCC_Delay+0x34>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0a      	ldr	r2, [pc, #40]	@ (800353c <RCC_Delay+0x38>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	0a5b      	lsrs	r3, r3, #9
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003520:	bf00      	nop
  }
  while (Delay --);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	60fa      	str	r2, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f9      	bne.n	8003520 <RCC_Delay+0x1c>
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	2000007c 	.word	0x2000007c
 800353c:	10624dd3 	.word	0x10624dd3

08003540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e041      	b.n	80035d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fa14 	bl	8001994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 fa5c 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d001      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e03a      	b.n	800366e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <HAL_TIM_Base_Start_IT+0x98>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00e      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003622:	d009      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a14      	ldr	r2, [pc, #80]	@ (800367c <HAL_TIM_Base_Start_IT+0x9c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x58>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	@ (8003680 <HAL_TIM_Base_Start_IT+0xa0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d111      	bne.n	800365c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b06      	cmp	r3, #6
 8003648:	d010      	beq.n	800366c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	e007      	b.n	800366c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800

08003684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d020      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01b      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0202 	mvn.w	r2, #2
 80036b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f998 	bl	8003a04 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f98b 	bl	80039f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f99a 	bl	8003a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d020      	beq.n	8003734 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0204 	mvn.w	r2, #4
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f972 	bl	8003a04 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f965 	bl	80039f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f974 	bl	8003a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d020      	beq.n	8003780 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0208 	mvn.w	r2, #8
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2204      	movs	r2, #4
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f94c 	bl	8003a04 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f93f 	bl	80039f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f94e 	bl	8003a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0210 	mvn.w	r2, #16
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2208      	movs	r2, #8
 80037a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f926 	bl	8003a04 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f919 	bl	80039f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f928 	bl	8003a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00c      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0201 	mvn.w	r2, #1
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fdba 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa7f 	bl	8003d12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8f8 	bl	8003a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00c      	beq.n	800385c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0220 	mvn.w	r2, #32
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa52 	bl	8003d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIM_ConfigClockSource+0x1c>
 800387c:	2302      	movs	r3, #2
 800387e:	e0b4      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x186>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800389e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b8:	d03e      	beq.n	8003938 <HAL_TIM_ConfigClockSource+0xd4>
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038be:	f200 8087 	bhi.w	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c6:	f000 8086 	beq.w	80039d6 <HAL_TIM_ConfigClockSource+0x172>
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ce:	d87f      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b70      	cmp	r3, #112	@ 0x70
 80038d2:	d01a      	beq.n	800390a <HAL_TIM_ConfigClockSource+0xa6>
 80038d4:	2b70      	cmp	r3, #112	@ 0x70
 80038d6:	d87b      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b60      	cmp	r3, #96	@ 0x60
 80038da:	d050      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x11a>
 80038dc:	2b60      	cmp	r3, #96	@ 0x60
 80038de:	d877      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b50      	cmp	r3, #80	@ 0x50
 80038e2:	d03c      	beq.n	800395e <HAL_TIM_ConfigClockSource+0xfa>
 80038e4:	2b50      	cmp	r3, #80	@ 0x50
 80038e6:	d873      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	d058      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x13a>
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	d86f      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b30      	cmp	r3, #48	@ 0x30
 80038f2:	d064      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 80038f4:	2b30      	cmp	r3, #48	@ 0x30
 80038f6:	d86b      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d060      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d867      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05c      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 8003904:	2b10      	cmp	r3, #16
 8003906:	d05a      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x15a>
 8003908:	e062      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800391a:	f000 f974 	bl	8003c06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800392c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	609a      	str	r2, [r3, #8]
      break;
 8003936:	e04f      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003948:	f000 f95d 	bl	8003c06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800395a:	609a      	str	r2, [r3, #8]
      break;
 800395c:	e03c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	461a      	mov	r2, r3
 800396c:	f000 f8d4 	bl	8003b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2150      	movs	r1, #80	@ 0x50
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f92b 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 800397c:	e02c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800398a:	461a      	mov	r2, r3
 800398c:	f000 f8f2 	bl	8003b74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2160      	movs	r1, #96	@ 0x60
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f91b 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 800399c:	e01c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	461a      	mov	r2, r3
 80039ac:	f000 f8b4 	bl	8003b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f90b 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 80039bc:	e00c      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f000 f902 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 80039ce:	e003      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	e000      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
	...

08003a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b0c <TIM_Base_SetConfig+0xd0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b10 <TIM_Base_SetConfig+0xd4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a2b      	ldr	r2, [pc, #172]	@ (8003b14 <TIM_Base_SetConfig+0xd8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a22      	ldr	r2, [pc, #136]	@ (8003b0c <TIM_Base_SetConfig+0xd0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8c:	d007      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1f      	ldr	r2, [pc, #124]	@ (8003b10 <TIM_Base_SetConfig+0xd4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <TIM_Base_SetConfig+0xd8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b0c <TIM_Base_SetConfig+0xd0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d103      	bne.n	8003ae4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f023 0201 	bic.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	611a      	str	r2, [r3, #16]
  }
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800

08003b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0201 	bic.w	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f023 030a 	bic.w	r3, r3, #10
 8003b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0210 	bic.w	r2, r3, #16
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	031b      	lsls	r3, r3, #12
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	621a      	str	r2, [r3, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f043 0307 	orr.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	021a      	lsls	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	609a      	str	r2, [r3, #8]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e046      	b.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a10      	ldr	r2, [pc, #64]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800

08003d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e042      	b.n	8003dbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fe46 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	@ 0x24
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fdb7 	bl	80048dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	@ 0x28
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d175      	bne.n	8003ed0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_UART_Transmit+0x2c>
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e06e      	b.n	8003ed2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2221      	movs	r2, #33	@ 0x21
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e02:	f7fd ff37 	bl	8001c74 <HAL_GetTick>
 8003e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	88fa      	ldrh	r2, [r7, #6]
 8003e12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1c:	d108      	bne.n	8003e30 <HAL_UART_Transmit+0x6c>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	e003      	b.n	8003e38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e38:	e02e      	b.n	8003e98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2180      	movs	r1, #128	@ 0x80
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fb1c 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e03a      	b.n	8003ed2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	3302      	adds	r3, #2
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e007      	b.n	8003e8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	3301      	adds	r3, #1
 8003e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1cb      	bne.n	8003e3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2140      	movs	r1, #64	@ 0x40
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fae8 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e006      	b.n	8003ed2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d112      	bne.n	8003f1a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_UART_Receive_IT+0x26>
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e00b      	b.n	8003f1c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb0f 	bl	8004534 <UART_Start_Receive_IT>
 8003f16:	4603      	mov	r3, r0
 8003f18:	e000      	b.n	8003f1c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b0ba      	sub	sp, #232	@ 0xe8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_UART_IRQHandler+0x66>
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fbec 	bl	8004760 <UART_Receive_IT>
      return;
 8003f88:	e25b      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80de 	beq.w	8004150 <HAL_UART_IRQHandler+0x22c>
 8003f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80d1 	beq.w	8004150 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_UART_IRQHandler+0xae>
 8003fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xd2>
 8003fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f043 0202 	orr.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_UART_IRQHandler+0xf6>
 8004002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d011      	beq.n	800404a <HAL_UART_IRQHandler+0x126>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f043 0208 	orr.w	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 81f2 	beq.w	8004438 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_UART_IRQHandler+0x14e>
 8004060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fb77 	bl	8004760 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <HAL_UART_IRQHandler+0x17a>
 8004096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d04f      	beq.n	800413e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa81 	bl	80045a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d041      	beq.n	8004136 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3314      	adds	r3, #20
 80040b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1d9      	bne.n	80040b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d013      	beq.n	800412e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	4a7e      	ldr	r2, [pc, #504]	@ (8004304 <HAL_UART_IRQHandler+0x3e0>)
 800410c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd ff24 	bl	8001f60 <HAL_DMA_Abort_IT>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004128:	4610      	mov	r0, r2
 800412a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412c:	e00e      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f993 	bl	800445a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	e00a      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f98f 	bl	800445a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	e006      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f98b 	bl	800445a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800414a:	e175      	b.n	8004438 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	bf00      	nop
    return;
 800414e:	e173      	b.n	8004438 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	2b01      	cmp	r3, #1
 8004156:	f040 814f 	bne.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8148 	beq.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8141 	beq.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80b6 	beq.w	8004308 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8145 	beq.w	800443c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041ba:	429a      	cmp	r2, r3
 80041bc:	f080 813e 	bcs.w	800443c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	f000 8088 	beq.w	80042e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004200:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004204:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800420c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1d9      	bne.n	80041d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004230:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3314      	adds	r3, #20
 8004240:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004244:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004248:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800424c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004256:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e1      	bne.n	8004220 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800426c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800426e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004280:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004282:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004286:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800428e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e3      	bne.n	800425c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b4:	f023 0310 	bic.w	r3, r3, #16
 80042b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e3      	bne.n	80042a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd fe03 	bl	8001eea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8b6 	bl	800446c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004300:	e09c      	b.n	800443c <HAL_UART_IRQHandler+0x518>
 8004302:	bf00      	nop
 8004304:	0800466b 	.word	0x0800466b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004310:	b29b      	uxth	r3, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 808e 	beq.w	8004440 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8089 	beq.w	8004440 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800433e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004352:	647a      	str	r2, [r7, #68]	@ 0x44
 8004354:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004358:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e3      	bne.n	800432e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	623b      	str	r3, [r7, #32]
   return(result);
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800438a:	633a      	str	r2, [r7, #48]	@ 0x30
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e3      	bne.n	8004366 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80043d0:	61fa      	str	r2, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	617b      	str	r3, [r7, #20]
   return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e3      	bne.n	80043ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f83b 	bl	800446c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f6:	e023      	b.n	8004440 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_UART_IRQHandler+0x4f4>
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f93e 	bl	8004692 <UART_Transmit_IT>
    return;
 8004416:	e014      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <HAL_UART_IRQHandler+0x51e>
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f97d 	bl	8004730 <UART_EndTransmit_IT>
    return;
 8004436:	e004      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
    return;
 8004438:	bf00      	nop
 800443a:	e002      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
      return;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
      return;
 8004440:	bf00      	nop
  }
}
 8004442:	37e8      	adds	r7, #232	@ 0xe8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b086      	sub	sp, #24
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004492:	e03b      	b.n	800450c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449a:	d037      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449c:	f7fd fbea 	bl	8001c74 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	6a3a      	ldr	r2, [r7, #32]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d302      	bcc.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e03a      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d023      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0x8a>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b80      	cmp	r3, #128	@ 0x80
 80044c8:	d020      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b40      	cmp	r3, #64	@ 0x40
 80044ce:	d01d      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d116      	bne.n	800450c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f856 	bl	80045a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2208      	movs	r2, #8
 80044fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e00f      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	429a      	cmp	r2, r3
 8004528:	d0b4      	beq.n	8004494 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2222      	movs	r2, #34	@ 0x22
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004578:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0220 	orr.w	r2, r2, #32
 8004598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b095      	sub	sp, #84	@ 0x54
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80045d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3314      	adds	r3, #20
 80045e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3314      	adds	r3, #20
 8004600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e5      	bne.n	80045e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	2b01      	cmp	r3, #1
 800461c:	d119      	bne.n	8004652 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	60bb      	str	r3, [r7, #8]
   return(result);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f023 0310 	bic.w	r3, r3, #16
 8004634:	647b      	str	r3, [r7, #68]	@ 0x44
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800463e:	61ba      	str	r2, [r7, #24]
 8004640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	613b      	str	r3, [r7, #16]
   return(result);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e5      	bne.n	800461e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004660:	bf00      	nop
 8004662:	3754      	adds	r7, #84	@ 0x54
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7ff fee8 	bl	800445a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b21      	cmp	r3, #33	@ 0x21
 80046a4:	d13e      	bne.n	8004724 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ae:	d114      	bne.n	80046da <UART_Transmit_IT+0x48>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d110      	bne.n	80046da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	1c9a      	adds	r2, r3, #2
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	621a      	str	r2, [r3, #32]
 80046d8:	e008      	b.n	80046ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6211      	str	r1, [r2, #32]
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4619      	mov	r1, r3
 80046fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10f      	bne.n	8004720 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800470e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800471e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004746:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fe79 	bl	8004448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08c      	sub	sp, #48	@ 0x30
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b22      	cmp	r3, #34	@ 0x22
 8004772:	f040 80ae 	bne.w	80048d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477e:	d117      	bne.n	80047b0 <UART_Receive_IT+0x50>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d113      	bne.n	80047b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	1c9a      	adds	r2, r3, #2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80047ae:	e026      	b.n	80047fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c2:	d007      	beq.n	80047d4 <UART_Receive_IT+0x74>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <UART_Receive_IT+0x82>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e008      	b.n	80047f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29b      	uxth	r3, r3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4619      	mov	r1, r3
 800480c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800480e:	2b00      	cmp	r3, #0
 8004810:	d15d      	bne.n	80048ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0220 	bic.w	r2, r2, #32
 8004820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004830:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	2b01      	cmp	r3, #1
 8004856:	d135      	bne.n	80048c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	613b      	str	r3, [r7, #16]
   return(result);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487e:	623a      	str	r2, [r7, #32]
 8004880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	69f9      	ldr	r1, [r7, #28]
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	61bb      	str	r3, [r7, #24]
   return(result);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b10      	cmp	r3, #16
 800489e:	d10a      	bne.n	80048b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fdd5 	bl	800446c <HAL_UARTEx_RxEventCallback>
 80048c2:	e002      	b.n	80048ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc fd59 	bl	800137c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e002      	b.n	80048d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3730      	adds	r7, #48	@ 0x30
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004916:	f023 030c 	bic.w	r3, r3, #12
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	430b      	orrs	r3, r1
 8004922:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2c      	ldr	r2, [pc, #176]	@ (80049f0 <UART_SetConfig+0x114>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fe fdca 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	e002      	b.n	8004952 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7fe fdb2 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004950:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	4a22      	ldr	r2, [pc, #136]	@ (80049f4 <UART_SetConfig+0x118>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	0119      	lsls	r1, r3, #4
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	009a      	lsls	r2, r3, #2
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	fbb2 f2f3 	udiv	r2, r2, r3
 8004988:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <UART_SetConfig+0x118>)
 800498a:	fba3 0302 	umull	r0, r3, r3, r2
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	2064      	movs	r0, #100	@ 0x64
 8004992:	fb00 f303 	mul.w	r3, r0, r3
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	3332      	adds	r3, #50	@ 0x32
 800499c:	4a15      	ldr	r2, [pc, #84]	@ (80049f4 <UART_SetConfig+0x118>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a8:	4419      	add	r1, r3
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c0:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <UART_SetConfig+0x118>)
 80049c2:	fba3 0302 	umull	r0, r3, r3, r2
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2064      	movs	r0, #100	@ 0x64
 80049ca:	fb00 f303 	mul.w	r3, r0, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	3332      	adds	r3, #50	@ 0x32
 80049d4:	4a07      	ldr	r2, [pc, #28]	@ (80049f4 <UART_SetConfig+0x118>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	f003 020f 	and.w	r2, r3, #15
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	440a      	add	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40013800 	.word	0x40013800
 80049f4:	51eb851f 	.word	0x51eb851f

080049f8 <siprintf>:
 80049f8:	b40e      	push	{r1, r2, r3}
 80049fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049fe:	b500      	push	{lr}
 8004a00:	b09c      	sub	sp, #112	@ 0x70
 8004a02:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a04:	9002      	str	r0, [sp, #8]
 8004a06:	9006      	str	r0, [sp, #24]
 8004a08:	9107      	str	r1, [sp, #28]
 8004a0a:	9104      	str	r1, [sp, #16]
 8004a0c:	4808      	ldr	r0, [pc, #32]	@ (8004a30 <siprintf+0x38>)
 8004a0e:	4909      	ldr	r1, [pc, #36]	@ (8004a34 <siprintf+0x3c>)
 8004a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a14:	9105      	str	r1, [sp, #20]
 8004a16:	6800      	ldr	r0, [r0, #0]
 8004a18:	a902      	add	r1, sp, #8
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	f000 f9a2 	bl	8004d64 <_svfiprintf_r>
 8004a20:	2200      	movs	r2, #0
 8004a22:	9b02      	ldr	r3, [sp, #8]
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	b01c      	add	sp, #112	@ 0x70
 8004a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a2c:	b003      	add	sp, #12
 8004a2e:	4770      	bx	lr
 8004a30:	20000088 	.word	0x20000088
 8004a34:	ffff0208 	.word	0xffff0208

08004a38 <memset>:
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4402      	add	r2, r0
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d100      	bne.n	8004a42 <memset+0xa>
 8004a40:	4770      	bx	lr
 8004a42:	f803 1b01 	strb.w	r1, [r3], #1
 8004a46:	e7f9      	b.n	8004a3c <memset+0x4>

08004a48 <strcat>:
 8004a48:	4602      	mov	r2, r0
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	7814      	ldrb	r4, [r2, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	3201      	adds	r2, #1
 8004a52:	2c00      	cmp	r4, #0
 8004a54:	d1fa      	bne.n	8004a4c <strcat+0x4>
 8004a56:	3b01      	subs	r3, #1
 8004a58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a60:	2a00      	cmp	r2, #0
 8004a62:	d1f9      	bne.n	8004a58 <strcat+0x10>
 8004a64:	bd10      	pop	{r4, pc}
	...

08004a68 <__errno>:
 8004a68:	4b01      	ldr	r3, [pc, #4]	@ (8004a70 <__errno+0x8>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000088 	.word	0x20000088

08004a74 <__libc_init_array>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	2600      	movs	r6, #0
 8004a78:	4d0c      	ldr	r5, [pc, #48]	@ (8004aac <__libc_init_array+0x38>)
 8004a7a:	4c0d      	ldr	r4, [pc, #52]	@ (8004ab0 <__libc_init_array+0x3c>)
 8004a7c:	1b64      	subs	r4, r4, r5
 8004a7e:	10a4      	asrs	r4, r4, #2
 8004a80:	42a6      	cmp	r6, r4
 8004a82:	d109      	bne.n	8004a98 <__libc_init_array+0x24>
 8004a84:	f000 fc78 	bl	8005378 <_init>
 8004a88:	2600      	movs	r6, #0
 8004a8a:	4d0a      	ldr	r5, [pc, #40]	@ (8004ab4 <__libc_init_array+0x40>)
 8004a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8004ab8 <__libc_init_array+0x44>)
 8004a8e:	1b64      	subs	r4, r4, r5
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	d105      	bne.n	8004aa2 <__libc_init_array+0x2e>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9c:	4798      	blx	r3
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7ee      	b.n	8004a80 <__libc_init_array+0xc>
 8004aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa6:	4798      	blx	r3
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	e7f2      	b.n	8004a92 <__libc_init_array+0x1e>
 8004aac:	080054f0 	.word	0x080054f0
 8004ab0:	080054f0 	.word	0x080054f0
 8004ab4:	080054f0 	.word	0x080054f0
 8004ab8:	080054f4 	.word	0x080054f4

08004abc <__retarget_lock_acquire_recursive>:
 8004abc:	4770      	bx	lr

08004abe <__retarget_lock_release_recursive>:
 8004abe:	4770      	bx	lr

08004ac0 <_free_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	d040      	beq.n	8004b4a <_free_r+0x8a>
 8004ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004acc:	1f0c      	subs	r4, r1, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfb8      	it	lt
 8004ad2:	18e4      	addlt	r4, r4, r3
 8004ad4:	f000 f8de 	bl	8004c94 <__malloc_lock>
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b4c <_free_r+0x8c>)
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	b933      	cbnz	r3, 8004aec <_free_r+0x2c>
 8004ade:	6063      	str	r3, [r4, #4]
 8004ae0:	6014      	str	r4, [r2, #0]
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae8:	f000 b8da 	b.w	8004ca0 <__malloc_unlock>
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	d908      	bls.n	8004b02 <_free_r+0x42>
 8004af0:	6820      	ldr	r0, [r4, #0]
 8004af2:	1821      	adds	r1, r4, r0
 8004af4:	428b      	cmp	r3, r1
 8004af6:	bf01      	itttt	eq
 8004af8:	6819      	ldreq	r1, [r3, #0]
 8004afa:	685b      	ldreq	r3, [r3, #4]
 8004afc:	1809      	addeq	r1, r1, r0
 8004afe:	6021      	streq	r1, [r4, #0]
 8004b00:	e7ed      	b.n	8004ade <_free_r+0x1e>
 8004b02:	461a      	mov	r2, r3
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	b10b      	cbz	r3, 8004b0c <_free_r+0x4c>
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	d9fa      	bls.n	8004b02 <_free_r+0x42>
 8004b0c:	6811      	ldr	r1, [r2, #0]
 8004b0e:	1850      	adds	r0, r2, r1
 8004b10:	42a0      	cmp	r0, r4
 8004b12:	d10b      	bne.n	8004b2c <_free_r+0x6c>
 8004b14:	6820      	ldr	r0, [r4, #0]
 8004b16:	4401      	add	r1, r0
 8004b18:	1850      	adds	r0, r2, r1
 8004b1a:	4283      	cmp	r3, r0
 8004b1c:	6011      	str	r1, [r2, #0]
 8004b1e:	d1e0      	bne.n	8004ae2 <_free_r+0x22>
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4408      	add	r0, r1
 8004b26:	6010      	str	r0, [r2, #0]
 8004b28:	6053      	str	r3, [r2, #4]
 8004b2a:	e7da      	b.n	8004ae2 <_free_r+0x22>
 8004b2c:	d902      	bls.n	8004b34 <_free_r+0x74>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	e7d6      	b.n	8004ae2 <_free_r+0x22>
 8004b34:	6820      	ldr	r0, [r4, #0]
 8004b36:	1821      	adds	r1, r4, r0
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	bf01      	itttt	eq
 8004b3c:	6819      	ldreq	r1, [r3, #0]
 8004b3e:	685b      	ldreq	r3, [r3, #4]
 8004b40:	1809      	addeq	r1, r1, r0
 8004b42:	6021      	streq	r1, [r4, #0]
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	6054      	str	r4, [r2, #4]
 8004b48:	e7cb      	b.n	8004ae2 <_free_r+0x22>
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	2000070c 	.word	0x2000070c

08004b50 <sbrk_aligned>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4e0f      	ldr	r6, [pc, #60]	@ (8004b90 <sbrk_aligned+0x40>)
 8004b54:	460c      	mov	r4, r1
 8004b56:	6831      	ldr	r1, [r6, #0]
 8004b58:	4605      	mov	r5, r0
 8004b5a:	b911      	cbnz	r1, 8004b62 <sbrk_aligned+0x12>
 8004b5c:	f000 fbaa 	bl	80052b4 <_sbrk_r>
 8004b60:	6030      	str	r0, [r6, #0]
 8004b62:	4621      	mov	r1, r4
 8004b64:	4628      	mov	r0, r5
 8004b66:	f000 fba5 	bl	80052b4 <_sbrk_r>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d103      	bne.n	8004b76 <sbrk_aligned+0x26>
 8004b6e:	f04f 34ff 	mov.w	r4, #4294967295
 8004b72:	4620      	mov	r0, r4
 8004b74:	bd70      	pop	{r4, r5, r6, pc}
 8004b76:	1cc4      	adds	r4, r0, #3
 8004b78:	f024 0403 	bic.w	r4, r4, #3
 8004b7c:	42a0      	cmp	r0, r4
 8004b7e:	d0f8      	beq.n	8004b72 <sbrk_aligned+0x22>
 8004b80:	1a21      	subs	r1, r4, r0
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 fb96 	bl	80052b4 <_sbrk_r>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d1f2      	bne.n	8004b72 <sbrk_aligned+0x22>
 8004b8c:	e7ef      	b.n	8004b6e <sbrk_aligned+0x1e>
 8004b8e:	bf00      	nop
 8004b90:	20000708 	.word	0x20000708

08004b94 <_malloc_r>:
 8004b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b98:	1ccd      	adds	r5, r1, #3
 8004b9a:	f025 0503 	bic.w	r5, r5, #3
 8004b9e:	3508      	adds	r5, #8
 8004ba0:	2d0c      	cmp	r5, #12
 8004ba2:	bf38      	it	cc
 8004ba4:	250c      	movcc	r5, #12
 8004ba6:	2d00      	cmp	r5, #0
 8004ba8:	4606      	mov	r6, r0
 8004baa:	db01      	blt.n	8004bb0 <_malloc_r+0x1c>
 8004bac:	42a9      	cmp	r1, r5
 8004bae:	d904      	bls.n	8004bba <_malloc_r+0x26>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	6033      	str	r3, [r6, #0]
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c90 <_malloc_r+0xfc>
 8004bbe:	f000 f869 	bl	8004c94 <__malloc_lock>
 8004bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	bb44      	cbnz	r4, 8004c1c <_malloc_r+0x88>
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff ffbf 	bl	8004b50 <sbrk_aligned>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	d158      	bne.n	8004c8a <_malloc_r+0xf6>
 8004bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8004bdc:	4627      	mov	r7, r4
 8004bde:	2f00      	cmp	r7, #0
 8004be0:	d143      	bne.n	8004c6a <_malloc_r+0xd6>
 8004be2:	2c00      	cmp	r4, #0
 8004be4:	d04b      	beq.n	8004c7e <_malloc_r+0xea>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	4639      	mov	r1, r7
 8004bea:	4630      	mov	r0, r6
 8004bec:	eb04 0903 	add.w	r9, r4, r3
 8004bf0:	f000 fb60 	bl	80052b4 <_sbrk_r>
 8004bf4:	4581      	cmp	r9, r0
 8004bf6:	d142      	bne.n	8004c7e <_malloc_r+0xea>
 8004bf8:	6821      	ldr	r1, [r4, #0]
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	1a6d      	subs	r5, r5, r1
 8004bfe:	4629      	mov	r1, r5
 8004c00:	f7ff ffa6 	bl	8004b50 <sbrk_aligned>
 8004c04:	3001      	adds	r0, #1
 8004c06:	d03a      	beq.n	8004c7e <_malloc_r+0xea>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	442b      	add	r3, r5
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	bb62      	cbnz	r2, 8004c70 <_malloc_r+0xdc>
 8004c16:	f8c8 7000 	str.w	r7, [r8]
 8004c1a:	e00f      	b.n	8004c3c <_malloc_r+0xa8>
 8004c1c:	6822      	ldr	r2, [r4, #0]
 8004c1e:	1b52      	subs	r2, r2, r5
 8004c20:	d420      	bmi.n	8004c64 <_malloc_r+0xd0>
 8004c22:	2a0b      	cmp	r2, #11
 8004c24:	d917      	bls.n	8004c56 <_malloc_r+0xc2>
 8004c26:	1961      	adds	r1, r4, r5
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	6025      	str	r5, [r4, #0]
 8004c2c:	bf18      	it	ne
 8004c2e:	6059      	strne	r1, [r3, #4]
 8004c30:	6863      	ldr	r3, [r4, #4]
 8004c32:	bf08      	it	eq
 8004c34:	f8c8 1000 	streq.w	r1, [r8]
 8004c38:	5162      	str	r2, [r4, r5]
 8004c3a:	604b      	str	r3, [r1, #4]
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 f82f 	bl	8004ca0 <__malloc_unlock>
 8004c42:	f104 000b 	add.w	r0, r4, #11
 8004c46:	1d23      	adds	r3, r4, #4
 8004c48:	f020 0007 	bic.w	r0, r0, #7
 8004c4c:	1ac2      	subs	r2, r0, r3
 8004c4e:	bf1c      	itt	ne
 8004c50:	1a1b      	subne	r3, r3, r0
 8004c52:	50a3      	strne	r3, [r4, r2]
 8004c54:	e7af      	b.n	8004bb6 <_malloc_r+0x22>
 8004c56:	6862      	ldr	r2, [r4, #4]
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	bf0c      	ite	eq
 8004c5c:	f8c8 2000 	streq.w	r2, [r8]
 8004c60:	605a      	strne	r2, [r3, #4]
 8004c62:	e7eb      	b.n	8004c3c <_malloc_r+0xa8>
 8004c64:	4623      	mov	r3, r4
 8004c66:	6864      	ldr	r4, [r4, #4]
 8004c68:	e7ae      	b.n	8004bc8 <_malloc_r+0x34>
 8004c6a:	463c      	mov	r4, r7
 8004c6c:	687f      	ldr	r7, [r7, #4]
 8004c6e:	e7b6      	b.n	8004bde <_malloc_r+0x4a>
 8004c70:	461a      	mov	r2, r3
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d1fb      	bne.n	8004c70 <_malloc_r+0xdc>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6053      	str	r3, [r2, #4]
 8004c7c:	e7de      	b.n	8004c3c <_malloc_r+0xa8>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	4630      	mov	r0, r6
 8004c82:	6033      	str	r3, [r6, #0]
 8004c84:	f000 f80c 	bl	8004ca0 <__malloc_unlock>
 8004c88:	e794      	b.n	8004bb4 <_malloc_r+0x20>
 8004c8a:	6005      	str	r5, [r0, #0]
 8004c8c:	e7d6      	b.n	8004c3c <_malloc_r+0xa8>
 8004c8e:	bf00      	nop
 8004c90:	2000070c 	.word	0x2000070c

08004c94 <__malloc_lock>:
 8004c94:	4801      	ldr	r0, [pc, #4]	@ (8004c9c <__malloc_lock+0x8>)
 8004c96:	f7ff bf11 	b.w	8004abc <__retarget_lock_acquire_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	20000704 	.word	0x20000704

08004ca0 <__malloc_unlock>:
 8004ca0:	4801      	ldr	r0, [pc, #4]	@ (8004ca8 <__malloc_unlock+0x8>)
 8004ca2:	f7ff bf0c 	b.w	8004abe <__retarget_lock_release_recursive>
 8004ca6:	bf00      	nop
 8004ca8:	20000704 	.word	0x20000704

08004cac <__ssputs_r>:
 8004cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb0:	461f      	mov	r7, r3
 8004cb2:	688e      	ldr	r6, [r1, #8]
 8004cb4:	4682      	mov	sl, r0
 8004cb6:	42be      	cmp	r6, r7
 8004cb8:	460c      	mov	r4, r1
 8004cba:	4690      	mov	r8, r2
 8004cbc:	680b      	ldr	r3, [r1, #0]
 8004cbe:	d82d      	bhi.n	8004d1c <__ssputs_r+0x70>
 8004cc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cc8:	d026      	beq.n	8004d18 <__ssputs_r+0x6c>
 8004cca:	6965      	ldr	r5, [r4, #20]
 8004ccc:	6909      	ldr	r1, [r1, #16]
 8004cce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cd2:	eba3 0901 	sub.w	r9, r3, r1
 8004cd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cda:	1c7b      	adds	r3, r7, #1
 8004cdc:	444b      	add	r3, r9
 8004cde:	106d      	asrs	r5, r5, #1
 8004ce0:	429d      	cmp	r5, r3
 8004ce2:	bf38      	it	cc
 8004ce4:	461d      	movcc	r5, r3
 8004ce6:	0553      	lsls	r3, r2, #21
 8004ce8:	d527      	bpl.n	8004d3a <__ssputs_r+0x8e>
 8004cea:	4629      	mov	r1, r5
 8004cec:	f7ff ff52 	bl	8004b94 <_malloc_r>
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	b360      	cbz	r0, 8004d4e <__ssputs_r+0xa2>
 8004cf4:	464a      	mov	r2, r9
 8004cf6:	6921      	ldr	r1, [r4, #16]
 8004cf8:	f000 fafa 	bl	80052f0 <memcpy>
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	6126      	str	r6, [r4, #16]
 8004d0a:	444e      	add	r6, r9
 8004d0c:	6026      	str	r6, [r4, #0]
 8004d0e:	463e      	mov	r6, r7
 8004d10:	6165      	str	r5, [r4, #20]
 8004d12:	eba5 0509 	sub.w	r5, r5, r9
 8004d16:	60a5      	str	r5, [r4, #8]
 8004d18:	42be      	cmp	r6, r7
 8004d1a:	d900      	bls.n	8004d1e <__ssputs_r+0x72>
 8004d1c:	463e      	mov	r6, r7
 8004d1e:	4632      	mov	r2, r6
 8004d20:	4641      	mov	r1, r8
 8004d22:	6820      	ldr	r0, [r4, #0]
 8004d24:	f000 faac 	bl	8005280 <memmove>
 8004d28:	2000      	movs	r0, #0
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	1b9b      	subs	r3, r3, r6
 8004d2e:	60a3      	str	r3, [r4, #8]
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	4433      	add	r3, r6
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3a:	462a      	mov	r2, r5
 8004d3c:	f000 fae6 	bl	800530c <_realloc_r>
 8004d40:	4606      	mov	r6, r0
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d1e0      	bne.n	8004d08 <__ssputs_r+0x5c>
 8004d46:	4650      	mov	r0, sl
 8004d48:	6921      	ldr	r1, [r4, #16]
 8004d4a:	f7ff feb9 	bl	8004ac0 <_free_r>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	f8ca 3000 	str.w	r3, [sl]
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d5e:	81a3      	strh	r3, [r4, #12]
 8004d60:	e7e9      	b.n	8004d36 <__ssputs_r+0x8a>
	...

08004d64 <_svfiprintf_r>:
 8004d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d68:	4698      	mov	r8, r3
 8004d6a:	898b      	ldrh	r3, [r1, #12]
 8004d6c:	4607      	mov	r7, r0
 8004d6e:	061b      	lsls	r3, r3, #24
 8004d70:	460d      	mov	r5, r1
 8004d72:	4614      	mov	r4, r2
 8004d74:	b09d      	sub	sp, #116	@ 0x74
 8004d76:	d510      	bpl.n	8004d9a <_svfiprintf_r+0x36>
 8004d78:	690b      	ldr	r3, [r1, #16]
 8004d7a:	b973      	cbnz	r3, 8004d9a <_svfiprintf_r+0x36>
 8004d7c:	2140      	movs	r1, #64	@ 0x40
 8004d7e:	f7ff ff09 	bl	8004b94 <_malloc_r>
 8004d82:	6028      	str	r0, [r5, #0]
 8004d84:	6128      	str	r0, [r5, #16]
 8004d86:	b930      	cbnz	r0, 8004d96 <_svfiprintf_r+0x32>
 8004d88:	230c      	movs	r3, #12
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	b01d      	add	sp, #116	@ 0x74
 8004d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d96:	2340      	movs	r3, #64	@ 0x40
 8004d98:	616b      	str	r3, [r5, #20]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d9e:	2320      	movs	r3, #32
 8004da0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004da4:	2330      	movs	r3, #48	@ 0x30
 8004da6:	f04f 0901 	mov.w	r9, #1
 8004daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004f48 <_svfiprintf_r+0x1e4>
 8004db2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004db6:	4623      	mov	r3, r4
 8004db8:	469a      	mov	sl, r3
 8004dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dbe:	b10a      	cbz	r2, 8004dc4 <_svfiprintf_r+0x60>
 8004dc0:	2a25      	cmp	r2, #37	@ 0x25
 8004dc2:	d1f9      	bne.n	8004db8 <_svfiprintf_r+0x54>
 8004dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8004dc8:	d00b      	beq.n	8004de2 <_svfiprintf_r+0x7e>
 8004dca:	465b      	mov	r3, fp
 8004dcc:	4622      	mov	r2, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f7ff ff6b 	bl	8004cac <__ssputs_r>
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f000 80a7 	beq.w	8004f2a <_svfiprintf_r+0x1c6>
 8004ddc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dde:	445a      	add	r2, fp
 8004de0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004de2:	f89a 3000 	ldrb.w	r3, [sl]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 809f 	beq.w	8004f2a <_svfiprintf_r+0x1c6>
 8004dec:	2300      	movs	r3, #0
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295
 8004df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df6:	f10a 0a01 	add.w	sl, sl, #1
 8004dfa:	9304      	str	r3, [sp, #16]
 8004dfc:	9307      	str	r3, [sp, #28]
 8004dfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e02:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e04:	4654      	mov	r4, sl
 8004e06:	2205      	movs	r2, #5
 8004e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0c:	484e      	ldr	r0, [pc, #312]	@ (8004f48 <_svfiprintf_r+0x1e4>)
 8004e0e:	f000 fa61 	bl	80052d4 <memchr>
 8004e12:	9a04      	ldr	r2, [sp, #16]
 8004e14:	b9d8      	cbnz	r0, 8004e4e <_svfiprintf_r+0xea>
 8004e16:	06d0      	lsls	r0, r2, #27
 8004e18:	bf44      	itt	mi
 8004e1a:	2320      	movmi	r3, #32
 8004e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e20:	0711      	lsls	r1, r2, #28
 8004e22:	bf44      	itt	mi
 8004e24:	232b      	movmi	r3, #43	@ 0x2b
 8004e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e30:	d015      	beq.n	8004e5e <_svfiprintf_r+0xfa>
 8004e32:	4654      	mov	r4, sl
 8004e34:	2000      	movs	r0, #0
 8004e36:	f04f 0c0a 	mov.w	ip, #10
 8004e3a:	9a07      	ldr	r2, [sp, #28]
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e42:	3b30      	subs	r3, #48	@ 0x30
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d94b      	bls.n	8004ee0 <_svfiprintf_r+0x17c>
 8004e48:	b1b0      	cbz	r0, 8004e78 <_svfiprintf_r+0x114>
 8004e4a:	9207      	str	r2, [sp, #28]
 8004e4c:	e014      	b.n	8004e78 <_svfiprintf_r+0x114>
 8004e4e:	eba0 0308 	sub.w	r3, r0, r8
 8004e52:	fa09 f303 	lsl.w	r3, r9, r3
 8004e56:	4313      	orrs	r3, r2
 8004e58:	46a2      	mov	sl, r4
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	e7d2      	b.n	8004e04 <_svfiprintf_r+0xa0>
 8004e5e:	9b03      	ldr	r3, [sp, #12]
 8004e60:	1d19      	adds	r1, r3, #4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	9103      	str	r1, [sp, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bfbb      	ittet	lt
 8004e6a:	425b      	neglt	r3, r3
 8004e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e70:	9307      	strge	r3, [sp, #28]
 8004e72:	9307      	strlt	r3, [sp, #28]
 8004e74:	bfb8      	it	lt
 8004e76:	9204      	strlt	r2, [sp, #16]
 8004e78:	7823      	ldrb	r3, [r4, #0]
 8004e7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e7c:	d10a      	bne.n	8004e94 <_svfiprintf_r+0x130>
 8004e7e:	7863      	ldrb	r3, [r4, #1]
 8004e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e82:	d132      	bne.n	8004eea <_svfiprintf_r+0x186>
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	3402      	adds	r4, #2
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	9203      	str	r2, [sp, #12]
 8004e8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e92:	9305      	str	r3, [sp, #20]
 8004e94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004f4c <_svfiprintf_r+0x1e8>
 8004e98:	2203      	movs	r2, #3
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	7821      	ldrb	r1, [r4, #0]
 8004e9e:	f000 fa19 	bl	80052d4 <memchr>
 8004ea2:	b138      	cbz	r0, 8004eb4 <_svfiprintf_r+0x150>
 8004ea4:	2240      	movs	r2, #64	@ 0x40
 8004ea6:	9b04      	ldr	r3, [sp, #16]
 8004ea8:	eba0 000a 	sub.w	r0, r0, sl
 8004eac:	4082      	lsls	r2, r0
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	3401      	adds	r4, #1
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb8:	2206      	movs	r2, #6
 8004eba:	4825      	ldr	r0, [pc, #148]	@ (8004f50 <_svfiprintf_r+0x1ec>)
 8004ebc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ec0:	f000 fa08 	bl	80052d4 <memchr>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d036      	beq.n	8004f36 <_svfiprintf_r+0x1d2>
 8004ec8:	4b22      	ldr	r3, [pc, #136]	@ (8004f54 <_svfiprintf_r+0x1f0>)
 8004eca:	bb1b      	cbnz	r3, 8004f14 <_svfiprintf_r+0x1b0>
 8004ecc:	9b03      	ldr	r3, [sp, #12]
 8004ece:	3307      	adds	r3, #7
 8004ed0:	f023 0307 	bic.w	r3, r3, #7
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	9303      	str	r3, [sp, #12]
 8004ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eda:	4433      	add	r3, r6
 8004edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ede:	e76a      	b.n	8004db6 <_svfiprintf_r+0x52>
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ee8:	e7a8      	b.n	8004e3c <_svfiprintf_r+0xd8>
 8004eea:	2300      	movs	r3, #0
 8004eec:	f04f 0c0a 	mov.w	ip, #10
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	3401      	adds	r4, #1
 8004ef4:	9305      	str	r3, [sp, #20]
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004efc:	3a30      	subs	r2, #48	@ 0x30
 8004efe:	2a09      	cmp	r2, #9
 8004f00:	d903      	bls.n	8004f0a <_svfiprintf_r+0x1a6>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0c6      	beq.n	8004e94 <_svfiprintf_r+0x130>
 8004f06:	9105      	str	r1, [sp, #20]
 8004f08:	e7c4      	b.n	8004e94 <_svfiprintf_r+0x130>
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f12:	e7f0      	b.n	8004ef6 <_svfiprintf_r+0x192>
 8004f14:	ab03      	add	r3, sp, #12
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	462a      	mov	r2, r5
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <_svfiprintf_r+0x1f4>)
 8004f1e:	a904      	add	r1, sp, #16
 8004f20:	f3af 8000 	nop.w
 8004f24:	1c42      	adds	r2, r0, #1
 8004f26:	4606      	mov	r6, r0
 8004f28:	d1d6      	bne.n	8004ed8 <_svfiprintf_r+0x174>
 8004f2a:	89ab      	ldrh	r3, [r5, #12]
 8004f2c:	065b      	lsls	r3, r3, #25
 8004f2e:	f53f af2d 	bmi.w	8004d8c <_svfiprintf_r+0x28>
 8004f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f34:	e72c      	b.n	8004d90 <_svfiprintf_r+0x2c>
 8004f36:	ab03      	add	r3, sp, #12
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	462a      	mov	r2, r5
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <_svfiprintf_r+0x1f4>)
 8004f40:	a904      	add	r1, sp, #16
 8004f42:	f000 f87d 	bl	8005040 <_printf_i>
 8004f46:	e7ed      	b.n	8004f24 <_svfiprintf_r+0x1c0>
 8004f48:	080054b2 	.word	0x080054b2
 8004f4c:	080054b8 	.word	0x080054b8
 8004f50:	080054bc 	.word	0x080054bc
 8004f54:	00000000 	.word	0x00000000
 8004f58:	08004cad 	.word	0x08004cad

08004f5c <_printf_common>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	4616      	mov	r6, r2
 8004f62:	4698      	mov	r8, r3
 8004f64:	688a      	ldr	r2, [r1, #8]
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	4607      	mov	r7, r0
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	bfb8      	it	lt
 8004f6e:	4613      	movlt	r3, r2
 8004f70:	6033      	str	r3, [r6, #0]
 8004f72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f76:	460c      	mov	r4, r1
 8004f78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f7c:	b10a      	cbz	r2, 8004f82 <_printf_common+0x26>
 8004f7e:	3301      	adds	r3, #1
 8004f80:	6033      	str	r3, [r6, #0]
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	0699      	lsls	r1, r3, #26
 8004f86:	bf42      	ittt	mi
 8004f88:	6833      	ldrmi	r3, [r6, #0]
 8004f8a:	3302      	addmi	r3, #2
 8004f8c:	6033      	strmi	r3, [r6, #0]
 8004f8e:	6825      	ldr	r5, [r4, #0]
 8004f90:	f015 0506 	ands.w	r5, r5, #6
 8004f94:	d106      	bne.n	8004fa4 <_printf_common+0x48>
 8004f96:	f104 0a19 	add.w	sl, r4, #25
 8004f9a:	68e3      	ldr	r3, [r4, #12]
 8004f9c:	6832      	ldr	r2, [r6, #0]
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	dc2b      	bgt.n	8004ffc <_printf_common+0xa0>
 8004fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	3b00      	subs	r3, #0
 8004fac:	bf18      	it	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	0692      	lsls	r2, r2, #26
 8004fb2:	d430      	bmi.n	8005016 <_printf_common+0xba>
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fbc:	47c8      	blx	r9
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d023      	beq.n	800500a <_printf_common+0xae>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	6922      	ldr	r2, [r4, #16]
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	bf14      	ite	ne
 8004fce:	2500      	movne	r5, #0
 8004fd0:	6833      	ldreq	r3, [r6, #0]
 8004fd2:	f04f 0600 	mov.w	r6, #0
 8004fd6:	bf08      	it	eq
 8004fd8:	68e5      	ldreq	r5, [r4, #12]
 8004fda:	f104 041a 	add.w	r4, r4, #26
 8004fde:	bf08      	it	eq
 8004fe0:	1aed      	subeq	r5, r5, r3
 8004fe2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004fe6:	bf08      	it	eq
 8004fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fec:	4293      	cmp	r3, r2
 8004fee:	bfc4      	itt	gt
 8004ff0:	1a9b      	subgt	r3, r3, r2
 8004ff2:	18ed      	addgt	r5, r5, r3
 8004ff4:	42b5      	cmp	r5, r6
 8004ff6:	d11a      	bne.n	800502e <_printf_common+0xd2>
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	e008      	b.n	800500e <_printf_common+0xb2>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4652      	mov	r2, sl
 8005000:	4641      	mov	r1, r8
 8005002:	4638      	mov	r0, r7
 8005004:	47c8      	blx	r9
 8005006:	3001      	adds	r0, #1
 8005008:	d103      	bne.n	8005012 <_printf_common+0xb6>
 800500a:	f04f 30ff 	mov.w	r0, #4294967295
 800500e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005012:	3501      	adds	r5, #1
 8005014:	e7c1      	b.n	8004f9a <_printf_common+0x3e>
 8005016:	2030      	movs	r0, #48	@ 0x30
 8005018:	18e1      	adds	r1, r4, r3
 800501a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005024:	4422      	add	r2, r4
 8005026:	3302      	adds	r3, #2
 8005028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800502c:	e7c2      	b.n	8004fb4 <_printf_common+0x58>
 800502e:	2301      	movs	r3, #1
 8005030:	4622      	mov	r2, r4
 8005032:	4641      	mov	r1, r8
 8005034:	4638      	mov	r0, r7
 8005036:	47c8      	blx	r9
 8005038:	3001      	adds	r0, #1
 800503a:	d0e6      	beq.n	800500a <_printf_common+0xae>
 800503c:	3601      	adds	r6, #1
 800503e:	e7d9      	b.n	8004ff4 <_printf_common+0x98>

08005040 <_printf_i>:
 8005040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	7e0f      	ldrb	r7, [r1, #24]
 8005046:	4691      	mov	r9, r2
 8005048:	2f78      	cmp	r7, #120	@ 0x78
 800504a:	4680      	mov	r8, r0
 800504c:	460c      	mov	r4, r1
 800504e:	469a      	mov	sl, r3
 8005050:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005056:	d807      	bhi.n	8005068 <_printf_i+0x28>
 8005058:	2f62      	cmp	r7, #98	@ 0x62
 800505a:	d80a      	bhi.n	8005072 <_printf_i+0x32>
 800505c:	2f00      	cmp	r7, #0
 800505e:	f000 80d3 	beq.w	8005208 <_printf_i+0x1c8>
 8005062:	2f58      	cmp	r7, #88	@ 0x58
 8005064:	f000 80ba 	beq.w	80051dc <_printf_i+0x19c>
 8005068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800506c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005070:	e03a      	b.n	80050e8 <_printf_i+0xa8>
 8005072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005076:	2b15      	cmp	r3, #21
 8005078:	d8f6      	bhi.n	8005068 <_printf_i+0x28>
 800507a:	a101      	add	r1, pc, #4	@ (adr r1, 8005080 <_printf_i+0x40>)
 800507c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050ed 	.word	0x080050ed
 8005088:	08005069 	.word	0x08005069
 800508c:	08005069 	.word	0x08005069
 8005090:	08005069 	.word	0x08005069
 8005094:	08005069 	.word	0x08005069
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005069 	.word	0x08005069
 80050a0:	08005069 	.word	0x08005069
 80050a4:	08005069 	.word	0x08005069
 80050a8:	08005069 	.word	0x08005069
 80050ac:	080051ef 	.word	0x080051ef
 80050b0:	08005117 	.word	0x08005117
 80050b4:	080051a9 	.word	0x080051a9
 80050b8:	08005069 	.word	0x08005069
 80050bc:	08005069 	.word	0x08005069
 80050c0:	08005211 	.word	0x08005211
 80050c4:	08005069 	.word	0x08005069
 80050c8:	08005117 	.word	0x08005117
 80050cc:	08005069 	.word	0x08005069
 80050d0:	08005069 	.word	0x08005069
 80050d4:	080051b1 	.word	0x080051b1
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6032      	str	r2, [r6, #0]
 80050e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050e8:	2301      	movs	r3, #1
 80050ea:	e09e      	b.n	800522a <_printf_i+0x1ea>
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	6820      	ldr	r0, [r4, #0]
 80050f0:	1d19      	adds	r1, r3, #4
 80050f2:	6031      	str	r1, [r6, #0]
 80050f4:	0606      	lsls	r6, r0, #24
 80050f6:	d501      	bpl.n	80050fc <_printf_i+0xbc>
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	e003      	b.n	8005104 <_printf_i+0xc4>
 80050fc:	0645      	lsls	r5, r0, #25
 80050fe:	d5fb      	bpl.n	80050f8 <_printf_i+0xb8>
 8005100:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005104:	2d00      	cmp	r5, #0
 8005106:	da03      	bge.n	8005110 <_printf_i+0xd0>
 8005108:	232d      	movs	r3, #45	@ 0x2d
 800510a:	426d      	negs	r5, r5
 800510c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005110:	230a      	movs	r3, #10
 8005112:	4859      	ldr	r0, [pc, #356]	@ (8005278 <_printf_i+0x238>)
 8005114:	e011      	b.n	800513a <_printf_i+0xfa>
 8005116:	6821      	ldr	r1, [r4, #0]
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	0608      	lsls	r0, r1, #24
 800511c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005120:	d402      	bmi.n	8005128 <_printf_i+0xe8>
 8005122:	0649      	lsls	r1, r1, #25
 8005124:	bf48      	it	mi
 8005126:	b2ad      	uxthmi	r5, r5
 8005128:	2f6f      	cmp	r7, #111	@ 0x6f
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	bf14      	ite	ne
 800512e:	230a      	movne	r3, #10
 8005130:	2308      	moveq	r3, #8
 8005132:	4851      	ldr	r0, [pc, #324]	@ (8005278 <_printf_i+0x238>)
 8005134:	2100      	movs	r1, #0
 8005136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800513a:	6866      	ldr	r6, [r4, #4]
 800513c:	2e00      	cmp	r6, #0
 800513e:	bfa8      	it	ge
 8005140:	6821      	ldrge	r1, [r4, #0]
 8005142:	60a6      	str	r6, [r4, #8]
 8005144:	bfa4      	itt	ge
 8005146:	f021 0104 	bicge.w	r1, r1, #4
 800514a:	6021      	strge	r1, [r4, #0]
 800514c:	b90d      	cbnz	r5, 8005152 <_printf_i+0x112>
 800514e:	2e00      	cmp	r6, #0
 8005150:	d04b      	beq.n	80051ea <_printf_i+0x1aa>
 8005152:	4616      	mov	r6, r2
 8005154:	fbb5 f1f3 	udiv	r1, r5, r3
 8005158:	fb03 5711 	mls	r7, r3, r1, r5
 800515c:	5dc7      	ldrb	r7, [r0, r7]
 800515e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005162:	462f      	mov	r7, r5
 8005164:	42bb      	cmp	r3, r7
 8005166:	460d      	mov	r5, r1
 8005168:	d9f4      	bls.n	8005154 <_printf_i+0x114>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d10b      	bne.n	8005186 <_printf_i+0x146>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	07df      	lsls	r7, r3, #31
 8005172:	d508      	bpl.n	8005186 <_printf_i+0x146>
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	6861      	ldr	r1, [r4, #4]
 8005178:	4299      	cmp	r1, r3
 800517a:	bfde      	ittt	le
 800517c:	2330      	movle	r3, #48	@ 0x30
 800517e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005182:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005186:	1b92      	subs	r2, r2, r6
 8005188:	6122      	str	r2, [r4, #16]
 800518a:	464b      	mov	r3, r9
 800518c:	4621      	mov	r1, r4
 800518e:	4640      	mov	r0, r8
 8005190:	f8cd a000 	str.w	sl, [sp]
 8005194:	aa03      	add	r2, sp, #12
 8005196:	f7ff fee1 	bl	8004f5c <_printf_common>
 800519a:	3001      	adds	r0, #1
 800519c:	d14a      	bne.n	8005234 <_printf_i+0x1f4>
 800519e:	f04f 30ff 	mov.w	r0, #4294967295
 80051a2:	b004      	add	sp, #16
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	f043 0320 	orr.w	r3, r3, #32
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	2778      	movs	r7, #120	@ 0x78
 80051b2:	4832      	ldr	r0, [pc, #200]	@ (800527c <_printf_i+0x23c>)
 80051b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	6831      	ldr	r1, [r6, #0]
 80051bc:	061f      	lsls	r7, r3, #24
 80051be:	f851 5b04 	ldr.w	r5, [r1], #4
 80051c2:	d402      	bmi.n	80051ca <_printf_i+0x18a>
 80051c4:	065f      	lsls	r7, r3, #25
 80051c6:	bf48      	it	mi
 80051c8:	b2ad      	uxthmi	r5, r5
 80051ca:	6031      	str	r1, [r6, #0]
 80051cc:	07d9      	lsls	r1, r3, #31
 80051ce:	bf44      	itt	mi
 80051d0:	f043 0320 	orrmi.w	r3, r3, #32
 80051d4:	6023      	strmi	r3, [r4, #0]
 80051d6:	b11d      	cbz	r5, 80051e0 <_printf_i+0x1a0>
 80051d8:	2310      	movs	r3, #16
 80051da:	e7ab      	b.n	8005134 <_printf_i+0xf4>
 80051dc:	4826      	ldr	r0, [pc, #152]	@ (8005278 <_printf_i+0x238>)
 80051de:	e7e9      	b.n	80051b4 <_printf_i+0x174>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	f023 0320 	bic.w	r3, r3, #32
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	e7f6      	b.n	80051d8 <_printf_i+0x198>
 80051ea:	4616      	mov	r6, r2
 80051ec:	e7bd      	b.n	800516a <_printf_i+0x12a>
 80051ee:	6833      	ldr	r3, [r6, #0]
 80051f0:	6825      	ldr	r5, [r4, #0]
 80051f2:	1d18      	adds	r0, r3, #4
 80051f4:	6961      	ldr	r1, [r4, #20]
 80051f6:	6030      	str	r0, [r6, #0]
 80051f8:	062e      	lsls	r6, r5, #24
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	d501      	bpl.n	8005202 <_printf_i+0x1c2>
 80051fe:	6019      	str	r1, [r3, #0]
 8005200:	e002      	b.n	8005208 <_printf_i+0x1c8>
 8005202:	0668      	lsls	r0, r5, #25
 8005204:	d5fb      	bpl.n	80051fe <_printf_i+0x1be>
 8005206:	8019      	strh	r1, [r3, #0]
 8005208:	2300      	movs	r3, #0
 800520a:	4616      	mov	r6, r2
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	e7bc      	b.n	800518a <_printf_i+0x14a>
 8005210:	6833      	ldr	r3, [r6, #0]
 8005212:	2100      	movs	r1, #0
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	6032      	str	r2, [r6, #0]
 8005218:	681e      	ldr	r6, [r3, #0]
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	4630      	mov	r0, r6
 800521e:	f000 f859 	bl	80052d4 <memchr>
 8005222:	b108      	cbz	r0, 8005228 <_printf_i+0x1e8>
 8005224:	1b80      	subs	r0, r0, r6
 8005226:	6060      	str	r0, [r4, #4]
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	2300      	movs	r3, #0
 800522e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005232:	e7aa      	b.n	800518a <_printf_i+0x14a>
 8005234:	4632      	mov	r2, r6
 8005236:	4649      	mov	r1, r9
 8005238:	4640      	mov	r0, r8
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	47d0      	blx	sl
 800523e:	3001      	adds	r0, #1
 8005240:	d0ad      	beq.n	800519e <_printf_i+0x15e>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	079b      	lsls	r3, r3, #30
 8005246:	d413      	bmi.n	8005270 <_printf_i+0x230>
 8005248:	68e0      	ldr	r0, [r4, #12]
 800524a:	9b03      	ldr	r3, [sp, #12]
 800524c:	4298      	cmp	r0, r3
 800524e:	bfb8      	it	lt
 8005250:	4618      	movlt	r0, r3
 8005252:	e7a6      	b.n	80051a2 <_printf_i+0x162>
 8005254:	2301      	movs	r3, #1
 8005256:	4632      	mov	r2, r6
 8005258:	4649      	mov	r1, r9
 800525a:	4640      	mov	r0, r8
 800525c:	47d0      	blx	sl
 800525e:	3001      	adds	r0, #1
 8005260:	d09d      	beq.n	800519e <_printf_i+0x15e>
 8005262:	3501      	adds	r5, #1
 8005264:	68e3      	ldr	r3, [r4, #12]
 8005266:	9903      	ldr	r1, [sp, #12]
 8005268:	1a5b      	subs	r3, r3, r1
 800526a:	42ab      	cmp	r3, r5
 800526c:	dcf2      	bgt.n	8005254 <_printf_i+0x214>
 800526e:	e7eb      	b.n	8005248 <_printf_i+0x208>
 8005270:	2500      	movs	r5, #0
 8005272:	f104 0619 	add.w	r6, r4, #25
 8005276:	e7f5      	b.n	8005264 <_printf_i+0x224>
 8005278:	080054c3 	.word	0x080054c3
 800527c:	080054d4 	.word	0x080054d4

08005280 <memmove>:
 8005280:	4288      	cmp	r0, r1
 8005282:	b510      	push	{r4, lr}
 8005284:	eb01 0402 	add.w	r4, r1, r2
 8005288:	d902      	bls.n	8005290 <memmove+0x10>
 800528a:	4284      	cmp	r4, r0
 800528c:	4623      	mov	r3, r4
 800528e:	d807      	bhi.n	80052a0 <memmove+0x20>
 8005290:	1e43      	subs	r3, r0, #1
 8005292:	42a1      	cmp	r1, r4
 8005294:	d008      	beq.n	80052a8 <memmove+0x28>
 8005296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800529a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800529e:	e7f8      	b.n	8005292 <memmove+0x12>
 80052a0:	4601      	mov	r1, r0
 80052a2:	4402      	add	r2, r0
 80052a4:	428a      	cmp	r2, r1
 80052a6:	d100      	bne.n	80052aa <memmove+0x2a>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052b2:	e7f7      	b.n	80052a4 <memmove+0x24>

080052b4 <_sbrk_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	2300      	movs	r3, #0
 80052b8:	4d05      	ldr	r5, [pc, #20]	@ (80052d0 <_sbrk_r+0x1c>)
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fc fc1e 	bl	8001b00 <_sbrk>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_sbrk_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_sbrk_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	20000700 	.word	0x20000700

080052d4 <memchr>:
 80052d4:	4603      	mov	r3, r0
 80052d6:	b510      	push	{r4, lr}
 80052d8:	b2c9      	uxtb	r1, r1
 80052da:	4402      	add	r2, r0
 80052dc:	4293      	cmp	r3, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	d101      	bne.n	80052e6 <memchr+0x12>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e003      	b.n	80052ee <memchr+0x1a>
 80052e6:	7804      	ldrb	r4, [r0, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	428c      	cmp	r4, r1
 80052ec:	d1f6      	bne.n	80052dc <memchr+0x8>
 80052ee:	bd10      	pop	{r4, pc}

080052f0 <memcpy>:
 80052f0:	440a      	add	r2, r1
 80052f2:	4291      	cmp	r1, r2
 80052f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052f8:	d100      	bne.n	80052fc <memcpy+0xc>
 80052fa:	4770      	bx	lr
 80052fc:	b510      	push	{r4, lr}
 80052fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005302:	4291      	cmp	r1, r2
 8005304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005308:	d1f9      	bne.n	80052fe <memcpy+0xe>
 800530a:	bd10      	pop	{r4, pc}

0800530c <_realloc_r>:
 800530c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005310:	4680      	mov	r8, r0
 8005312:	4615      	mov	r5, r2
 8005314:	460c      	mov	r4, r1
 8005316:	b921      	cbnz	r1, 8005322 <_realloc_r+0x16>
 8005318:	4611      	mov	r1, r2
 800531a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	f7ff bc39 	b.w	8004b94 <_malloc_r>
 8005322:	b92a      	cbnz	r2, 8005330 <_realloc_r+0x24>
 8005324:	f7ff fbcc 	bl	8004ac0 <_free_r>
 8005328:	2400      	movs	r4, #0
 800532a:	4620      	mov	r0, r4
 800532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005330:	f000 f81a 	bl	8005368 <_malloc_usable_size_r>
 8005334:	4285      	cmp	r5, r0
 8005336:	4606      	mov	r6, r0
 8005338:	d802      	bhi.n	8005340 <_realloc_r+0x34>
 800533a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800533e:	d8f4      	bhi.n	800532a <_realloc_r+0x1e>
 8005340:	4629      	mov	r1, r5
 8005342:	4640      	mov	r0, r8
 8005344:	f7ff fc26 	bl	8004b94 <_malloc_r>
 8005348:	4607      	mov	r7, r0
 800534a:	2800      	cmp	r0, #0
 800534c:	d0ec      	beq.n	8005328 <_realloc_r+0x1c>
 800534e:	42b5      	cmp	r5, r6
 8005350:	462a      	mov	r2, r5
 8005352:	4621      	mov	r1, r4
 8005354:	bf28      	it	cs
 8005356:	4632      	movcs	r2, r6
 8005358:	f7ff ffca 	bl	80052f0 <memcpy>
 800535c:	4621      	mov	r1, r4
 800535e:	4640      	mov	r0, r8
 8005360:	f7ff fbae 	bl	8004ac0 <_free_r>
 8005364:	463c      	mov	r4, r7
 8005366:	e7e0      	b.n	800532a <_realloc_r+0x1e>

08005368 <_malloc_usable_size_r>:
 8005368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536c:	1f18      	subs	r0, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfbc      	itt	lt
 8005372:	580b      	ldrlt	r3, [r1, r0]
 8005374:	18c0      	addlt	r0, r0, r3
 8005376:	4770      	bx	lr

08005378 <_init>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	bf00      	nop
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr

08005384 <_fini>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr
